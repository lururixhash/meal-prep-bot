#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Meal Prep Bot V2.0 - Sistema completo con perfiles individuales y IA integrada
Integra todos los sistemas nuevos: categor√≠as duales, Available Energy, generaci√≥n IA
"""

import json
import os
import logging
import fcntl
import atexit
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple

import telebot
from telebot import types
from anthropic import Anthropic
from flask import Flask, request

# Importar nuevos sistemas
from user_profile_system import UserProfileSystem
from claude_prompt_system import ClaudePromptSystem
from recipe_validator import RecipeValidator
from ai_integration import AIRecipeGenerator, format_recipe_for_display
from menu_display_system import format_menu_for_telegram

from config import (
    TELEGRAM_TOKEN, ANTHROPIC_API_KEY, WEBHOOK_URL, WEBHOOK_PATH, USE_WEBHOOK
)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Inicializar componentes
bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# Inicializar Claude client
try:
    claude_client = Anthropic(api_key=ANTHROPIC_API_KEY)
    logger.info("‚úÖ Claude client initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Error initializing Claude client: {e}")
    claude_client = None

class MealPrepBotV2:
    def __init__(self):
        self.database_file = "recipes_new.json"
        self.data = self.load_data()
        
        # Inicializar sistemas
        self.profile_system = UserProfileSystem(self.database_file)
        self.prompt_system = ClaudePromptSystem()
        self.validator = RecipeValidator()
        self.ai_generator = AIRecipeGenerator(
            ANTHROPIC_API_KEY, 
            self.prompt_system, 
            self.validator
        )
        
        # Estado de conversaci√≥n por usuario
        self.user_states = {}
        
        logger.info("üöÄ MealPrepBot V2.0 initialized with new architecture")
    
    def load_data(self) -> Dict:
        """Cargar datos de la nueva estructura"""
        try:
            with open(self.database_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"No se encontr√≥ {self.database_file}")
            return self.create_default_data()
        except json.JSONDecodeError:
            logger.error(f"Error al leer {self.database_file}")
            return self.create_default_data()
    
    def create_default_data(self) -> Dict:
        """Crear estructura de datos nueva"""
        with open("recipes_new.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def save_data(self) -> bool:
        """Guardar datos con backup autom√°tico"""
        try:
            # Crear backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"backup_v2_{timestamp}.json"
            
            if os.path.exists(self.database_file):
                with open(self.database_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            # Guardar datos actuales
            with open(self.database_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            logger.error(f"Error al guardar datos: {e}")
            return False
    
    def get_user_profile(self, telegram_id: str) -> Optional[Dict]:
        """Obtener perfil de usuario por Telegram ID"""
        return self.data["users"].get(telegram_id)
    
    def create_user_if_not_exists(self, telegram_id: str, message) -> bool:
        """Crear usuario si no existe y redirigir a setup de perfil"""
        if telegram_id not in self.data["users"]:
            bot.send_message(
                message.chat.id,
                "üëã ¬°Bienvenido al Meal Prep Bot V2.0!\n\n"
                "Para comenzar, necesito configurar tu perfil nutricional personalizado.\n"
                "Usa el comando /perfil para empezar.",
                reply_markup=self.create_main_menu_keyboard()
            )
            return False
        return True
    
    def create_main_menu_keyboard(self) -> types.ReplyKeyboardMarkup:
        """Crear teclado principal con comandos disponibles"""
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        
        buttons = [
            "/perfil", "/mis_macros",
            "/menu", "/recetas", 
            "/complementos", "/buscar",
            "/generar", "/nueva_semana"
        ]
        
        keyboard.add(*[types.KeyboardButton(btn) for btn in buttons])
        return keyboard
    
    def split_long_message(self, text: str, max_length: int = 4000) -> List[str]:
        """Dividir mensajes largos para Telegram (l√≠mite 4096 caracteres)"""
        if len(text) <= max_length:
            return [text]
        
        messages = []
        current_message = ""
        
        lines = text.split('\n')
        for line in lines:
            if len(current_message + line + '\n') <= max_length:
                current_message += line + '\n'
            else:
                if current_message:
                    messages.append(current_message.strip())
                current_message = line + '\n'
        
        if current_message:
            messages.append(current_message.strip())
        
        return messages
    
    def send_long_message(self, chat_id: int, text: str, **kwargs):
        """Enviar mensaje largo dividi√©ndolo si es necesario"""
        messages = self.split_long_message(text)
        for i, msg in enumerate(messages):
            if i == 0:
                bot.send_message(chat_id, msg, **kwargs)
            else:
                bot.send_message(chat_id, msg, parse_mode=kwargs.get('parse_mode'))

# Crear instancia global del bot
meal_bot = MealPrepBotV2()

# ========================================
# COMANDOS PRINCIPALES
# ========================================

@bot.message_handler(commands=['start'])
def start_command(message):
    """Comando de inicio"""
    telegram_id = str(message.from_user.id)
    
    welcome_text = """
üçΩÔ∏è ¬°Bienvenido al Meal Prep Bot!

Soy tu asistente personal para meal prep con batch cooking. Te ayudo a:

üìÖ Gestionar men√∫s con rotaci√≥n autom√°tica cada 2 semanas
üßÆ Calcular macros personalizados seg√∫n tu perfil
üõí Generar listas de compra categorizadas
‚è∞ Crear cronogramas de cocci√≥n optimizados
ü§ñ Modificar recetas basado en tu feedback

**Comandos disponibles:**
/perfil - Crear tu perfil personalizado
/mis_macros - Ver tus macros calculados
/menu - Ver men√∫ de la semana actual
/recetas - Ver todas las recetas
/buscar consulta - Buscar o crear recetas con IA

ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS:**
/complementos - Ver alimentos simples naturales
/nueva_semana - Rotaci√≥n semanal con complementos

ü§ñ **GENERACI√ìN INTELIGENTE:**
/generar - Crear recetas por timing nutricional

üìä **GESTI√ìN:**
/compras - Lista de compra con complementos
/cronograma - Ver cronograma de cocci√≥n
/rating receta 1-5 comentario - Calificar receta
/favorito receta - Marcar como favorito

Tambi√©n puedes escribirme en lenguaje natural como:
"No me gusta el cilantro en esta receta"
"Quiero m√°s recetas con pollo"

¬°Empecemos! Usa /menu para ver tu men√∫ actual üë®üç≥
"""
    
    meal_bot.send_long_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=meal_bot.create_main_menu_keyboard()
    )

@bot.message_handler(commands=['perfil'])
def perfil_command(message):
    """Comando para configurar perfil de usuario"""
    telegram_id = str(message.from_user.id)
    
    # Iniciar proceso de configuraci√≥n de perfil
    meal_bot.user_states[telegram_id] = {
        "state": "profile_setup",
        "step": "peso",
        "data": {}
    }
    
    bot.send_message(
        message.chat.id,
        "üë§ **CONFIGURACI√ìN DE PERFIL NUTRICIONAL**\n\n"
        "Te har√© algunas preguntas para calcular tus macros personalizados "
        "basados en evidencia cient√≠fica.\n\n"
        "üìè **Paso 1/10:** ¬øCu√°l es tu peso actual en kg?\n"
        "_(Ejemplo: 70)_",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['mis_macros'])
def mis_macros_command(message):
    """Mostrar macros calculados del usuario"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    # Datos del perfil
    basic_data = user_profile["basic_data"]
    body_comp = user_profile["body_composition"]
    energy_data = user_profile["energy_data"]
    macros = user_profile["macros"]
    
    response_text = f"""
üë§ **TU PERFIL NUTRICIONAL**

**DATOS B√ÅSICOS:**
‚Ä¢ Peso: {basic_data['peso']} kg
‚Ä¢ Altura: {basic_data['altura']} cm
‚Ä¢ Edad: {basic_data['edad']} a√±os
‚Ä¢ Objetivo: {basic_data['objetivo_descripcion']}

**COMPOSICI√ìN CORPORAL:**
‚Ä¢ BMR: {body_comp['bmr']} kcal/d√≠a
‚Ä¢ Grasa corporal: {body_comp['body_fat_percentage']}%
‚Ä¢ Masa magra: {body_comp['lean_mass_kg']} kg
‚Ä¢ IMC: {body_comp['bmi']}

**ENERG√çA DISPONIBLE:**
‚Ä¢ Available Energy: {energy_data['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Estado: {energy_data['ea_status']['color']} {energy_data['ea_status']['description']}
‚Ä¢ TDEE: {energy_data['tdee']} kcal/d√≠a
‚Ä¢ Ejercicio diario: {energy_data['daily_exercise_calories']} kcal

**MACROS DIARIOS OBJETIVO:**
ü•© Prote√≠na: {macros['protein_g']}g ({macros['protein_g']*4} kcal)
üçû Carbohidratos: {macros['carbs_g']}g ({macros['carbs_g']*4} kcal)
ü•ë Grasas: {macros['fat_g']}g ({macros['fat_g']*9} kcal)
üî• **TOTAL: {macros['calories']} kcal/d√≠a**

**RECOMENDACI√ìN:**
{energy_data['ea_status']['recommendation']}
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['menu'])
def menu_command(message):
    """Mostrar men√∫ semanal con timing nutricional"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    # Generar men√∫ con timing nutricional
    try:
        menu_text = format_menu_for_telegram(user_profile)
        meal_bot.send_long_message(message.chat.id, menu_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error generating menu: {e}")
        
        # Fallback a men√∫ b√°sico
        fallback_text = f"""
üìÖ **MEN√ö SEMANAL PERSONALIZADO**

üéØ **Objetivo:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Calor√≠as diarias:** {user_profile['macros']['calories']} kcal
‚ö° **Available Energy:** {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a

**TIMING NUTRICIONAL OPTIMIZADO:**

üåÖ **DESAYUNO Y PRE-ENTRENO:**
‚Ä¢ Energ√≠a r√°pida para entrenar
‚Ä¢ Carbohidratos de absorci√≥n r√°pida

üçΩÔ∏è **ALMUERZO Y POST-ENTRENO:**
‚Ä¢ Prote√≠na para recuperaci√≥n muscular
‚Ä¢ Reposici√≥n de gluc√≥geno

üåô **CENA:**
‚Ä¢ Comida balanceada
‚Ä¢ Preparaci√≥n para descanso

ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS:**
‚Ä¢ Distribuidos durante el d√≠a
‚Ä¢ Completan macros faltantes

**Para generar tu men√∫ espec√≠fico:**
‚Ä¢ /generar - Crear recetas por timing
‚Ä¢ /buscar [plato] - Encontrar recetas espec√≠ficas
‚Ä¢ /nueva_semana - Configurar rotaci√≥n completa
"""
        
        meal_bot.send_long_message(message.chat.id, fallback_text, parse_mode='Markdown')

@bot.message_handler(commands=['recetas'])
def recetas_command(message):
    """Mostrar recetas disponibles por categor√≠as"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Mostrar estructura de categor√≠as nuevas
    response_text = """
üìö **CATEGOR√çAS DE RECETAS V2.0**

üïê **POR TIMING NUTRICIONAL:**

‚ö° **PRE-ENTRENO** (15-30 min antes)
‚Ä¢ Energ√≠a r√°pida: Carbohidratos de absorci√≥n r√°pida
‚Ä¢ Hidrataci√≥n: L√≠quidos + electrolitos

üí™ **POST-ENTRENO** (0-30 min despu√©s)
‚Ä¢ S√≠ntesis proteica: Prote√≠nas completas
‚Ä¢ Reposici√≥n gluc√≥geno: Carbohidratos complejos

üçΩÔ∏è **COMIDA PRINCIPAL**
‚Ä¢ Equilibrio nutricional: Macros balanceados
‚Ä¢ Saciedad: Fibra + prote√≠na

ü•ú **SNACK/COMPLEMENTO**
‚Ä¢ Micronutrientes: Vitaminas y minerales
‚Ä¢ Grasas saludables: √Åcidos grasos esenciales

**COMPLEJIDAD:**
‚≠ê Muy f√°cil (15-30 min)
‚≠ê‚≠ê F√°cil (30-45 min)
‚≠ê‚≠ê‚≠ê Moderado (45-60 min)
‚≠ê‚≠ê‚≠ê‚≠ê Complejo (60+ min)

**Usa /buscar [tipo de plato] para generar recetas espec√≠ficas**
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['complementos'])
def complementos_command(message):
    """Mostrar complementos mediterr√°neos disponibles"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Mostrar complementos de la base de datos
    complements = meal_bot.data.get("global_complements", {})
    
    response_text = "ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS NATURALES**\n\n"
    
    for category, items in complements.items():
        category_name = category.replace("_", " ").title()
        response_text += f"**{category_name.upper()}:**\n"
        
        for item_id, item_data in items.items():
            name = item_data["name"]
            portion = item_data["portion_size"]
            unit = item_data["unit"]
            macros = item_data["macros_per_portion"]
            
            response_text += f"‚Ä¢ {name} ({portion}{unit})\n"
            response_text += f"  {macros['protein']}P / {macros['carbs']}C / {macros['fat']}G = {macros['calories']} kcal\n"
        
        response_text += "\n"
    
    response_text += """
**TIMING RECOMENDADO:**
üåÖ **Media ma√±ana:** Frutos secos + frutas
üåû **Media tarde:** L√°cteos + aceitunas
üåô **Noche:** Seg√∫n macros faltantes

**Los complementos se calculan autom√°ticamente para completar tus macros diarios.**
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['buscar'])
def buscar_command(message):
    """Comando para buscar/generar recetas con IA"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Extraer consulta del mensaje
    query = message.text.replace('/buscar', '').strip()
    
    if not query:
        bot.send_message(
            message.chat.id,
            "üîç **B√öSQUEDA INTELIGENTE DE RECETAS**\n\n"
            "Usa: `/buscar [tu consulta]`\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ `/buscar pollo post entreno`\n"
            "‚Ä¢ `/buscar legumbres mediterraneas`\n"
            "‚Ä¢ `/buscar snack alto proteina`\n"
            "‚Ä¢ `/buscar desayuno pre entreno`\n\n"
            "La IA generar√° recetas personalizadas seg√∫n tu perfil.",
            parse_mode='Markdown'
        )
        return
    
    # Iniciar b√∫squeda con IA
    meal_bot.user_states[telegram_id] = {
        "state": "ai_search",
        "query": query,
        "step": "processing"
    }
    
    bot.send_message(
        message.chat.id,
        f"ü§ñ **Buscando recetas para:** '{query}'\n\n"
        "‚è≥ Generando opciones personalizadas con IA...\n"
        "üìä Considerando tu perfil nutricional...\n"
        "üçΩÔ∏è Validando ingredientes naturales...",
        parse_mode='Markdown'
    )
    
    # Procesar b√∫squeda (se implementar√° completamente en siguiente fase)
    process_ai_search(telegram_id, query, message)

@bot.message_handler(commands=['nueva_semana'])
def nueva_semana_command(message):
    """Configurar nueva semana con cronograma"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    # Mostrar opciones de cronograma  
    response_text = f"""
üìÖ **CONFIGURAR NUEVA SEMANA**

üë§ **Tu perfil:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Calor√≠as objetivo:** {user_profile['macros']['calories']} kcal/d√≠a

üïê **OPCIONES DE CRONOGRAMA SEMANAL:**

‚≠ê **RECOMENDADO para tu perfil:**
üÖ∞Ô∏è **Sesi√≥n √∫nica domingo** (4-6 horas)
   ‚Ä¢ M√°xima eficiencia meal prep
   ‚Ä¢ Todo listo para la semana
   ‚Ä¢ Tiempo estimado: 4-6 horas

üÖ±Ô∏è **Dos sesiones: Dom + Mi√©r** (2-3 horas c/u)
   ‚Ä¢ Balance eficiencia/frescura
   ‚Ä¢ Comidas m√°s frescas
   ‚Ä¢ Tiempo total: 4-6 horas

üÖ≤Ô∏è **Tres sesiones: Dom/Mar/Vie** (1.5-2 horas c/u)
   ‚Ä¢ M√°xima frescura
   ‚Ä¢ Carga distribuida
   ‚Ä¢ Tiempo total: 4.5-6 horas

üÖ≥Ô∏è **Preparaci√≥n diaria** (20-30 min/d√≠a)
   ‚Ä¢ Comida siempre fresca  
   ‚Ä¢ Sin meal prep masivo
   ‚Ä¢ Tiempo diario: 20-30 min

**Responde con la letra de tu opci√≥n preferida (A, B, C, D)**
"""
    
    meal_bot.user_states[telegram_id] = {
        "state": "schedule_setup",
        "step": "choose_schedule"
    }
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['generar'])
def generar_command(message):
    """Generar receta espec√≠fica por timing y funci√≥n"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Mostrar opciones de generaci√≥n
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # Botones por timing
    keyboard.add(
        types.InlineKeyboardButton("‚ö° Pre-entreno", callback_data="gen_pre_entreno"),
        types.InlineKeyboardButton("üí™ Post-entreno", callback_data="gen_post_entreno")
    )
    keyboard.add(
        types.InlineKeyboardButton("üçΩÔ∏è Comida principal", callback_data="gen_comida_principal"),
        types.InlineKeyboardButton("ü•ú Snack/Complemento", callback_data="gen_snack")
    )
    
    bot.send_message(
        message.chat.id,
        "ü§ñ **GENERACI√ìN ESPEC√çFICA DE RECETAS**\n\n"
        "Selecciona el tipo de receta que quieres generar seg√∫n tu timing nutricional:\n\n"
        "‚ö° **Pre-entreno:** Energ√≠a r√°pida (15-30 min antes)\n"
        "üí™ **Post-entreno:** Recuperaci√≥n muscular (0-30 min despu√©s)\n"
        "üçΩÔ∏è **Comida principal:** Nutrici√≥n balanceada general\n"
        "ü•ú **Snack:** Complemento para ajustar macros\n\n"
        "**La receta se adaptar√° autom√°ticamente a tu perfil nutricional.**",
        parse_mode='Markdown',
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('gen_'))
def handle_generation_callback(call):
    """Manejar callbacks de generaci√≥n de recetas"""
    telegram_id = str(call.from_user.id)
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    if not user_profile:
        bot.answer_callback_query(call.id, "‚ùå Configura tu perfil primero", show_alert=True)
        return
    
    # Mapear callback a par√°metros
    timing_map = {
        "gen_pre_entreno": {
            "timing_category": "pre_entreno",
            "function_category": "energia_rapida",
            "target_macros": {"protein": 10, "carbs": 35, "fat": 5, "calories": 210}
        },
        "gen_post_entreno": {
            "timing_category": "post_entreno", 
            "function_category": "sintesis_proteica",
            "target_macros": {"protein": 35, "carbs": 30, "fat": 8, "calories": 320}
        },
        "gen_comida_principal": {
            "timing_category": "comida_principal",
            "function_category": "equilibrio_nutricional",
            "target_macros": {"protein": 40, "carbs": 50, "fat": 20, "calories": 480}
        },
        "gen_snack": {
            "timing_category": "snack_complemento",
            "function_category": "micronutrientes", 
            "target_macros": {"protein": 15, "carbs": 20, "fat": 12, "calories": 220}
        }
    }
    
    request_data = timing_map.get(call.data)
    if not request_data:
        bot.answer_callback_query(call.id, "‚ùå Opci√≥n no v√°lida", show_alert=True)
        return
    
    bot.answer_callback_query(call.id, "ü§ñ Generando receta personalizada...")
    
    # Mensaje de procesamiento
    processing_msg = bot.send_message(
        call.message.chat.id,
        f"ü§ñ **GENERANDO RECETA PERSONALIZADA**\n\n"
        f"üéØ **Tipo:** {request_data['timing_category'].replace('_', ' ').title()}\n"
        f"‚ö° **Funci√≥n:** {request_data['function_category'].replace('_', ' ').title()}\n"
        f"üìä **Macros objetivo:** {request_data['target_macros']['calories']} kcal\n\n"
        "‚è≥ Procesando con IA...\n"
        "üß¨ Adaptando a tu perfil...\n"
        "‚úÖ Validando ingredientes naturales...",
        parse_mode='Markdown'
    )
    
    try:
        # Generar receta con IA
        result = meal_bot.ai_generator.generate_recipe(user_profile, request_data)
        
        # Borrar mensaje de procesamiento
        bot.delete_message(call.message.chat.id, processing_msg.message_id)
        
        if result["success"]:
            recipe = result["recipe"]
            validation = result["validation"]
            
            # Formatear y enviar receta
            recipe_text = format_recipe_for_display(recipe, validation)
            
            success_text = f"""
üéâ **RECETA GENERADA EXITOSAMENTE**

{recipe_text}

ü§ñ **Generada espec√≠ficamente para tu perfil:**
‚Ä¢ Objetivo: {user_profile['basic_data']['objetivo_descripcion']}
‚Ä¢ Available Energy: {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Todos los ingredientes son naturales y no procesados

üí° **¬øQuieres otra opci√≥n?** Usa el comando /generar de nuevo
"""
            
            meal_bot.send_long_message(call.message.chat.id, success_text, parse_mode='Markdown')
            
        else:
            error_msg = result.get("error", "Error desconocido")
            bot.send_message(
                call.message.chat.id,
                f"‚ùå **Error generando receta:**\n{error_msg}\n\n"
                "üí° **Intenta:**\n"
                "‚Ä¢ Usar /generar de nuevo\n"
                "‚Ä¢ Verificar tu conexi√≥n\n"
                "‚Ä¢ Usar /buscar para b√∫squeda libre",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in recipe generation: {e}")
        bot.delete_message(call.message.chat.id, processing_msg.message_id)
        bot.send_message(
            call.message.chat.id,
            "‚ùå **Error t√©cnico** generando la receta.\n"
            "Int√©ntalo de nuevo en unos momentos.",
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['compras'])
def compras_command(message):
    """Mostrar lista de compras con complementos"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    response_text = f"""
üõí **LISTA DE COMPRAS SEMANAL**

üë§ **Tu perfil:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Calor√≠as objetivo:** {user_profile['macros']['calories']} kcal/d√≠a

**PROTE√çNAS:**
‚Ä¢ Pechuga de pollo: 2.5 kg
‚Ä¢ Carne de res magra: 1.5 kg
‚Ä¢ Huevos frescos: 2 docenas
‚Ä¢ Salm√≥n fresco: 800g

**LEGUMBRES Y CEREALES:**
‚Ä¢ Quinoa: 500g
‚Ä¢ Arroz integral: 1 kg
‚Ä¢ Lentejas rojas: 400g
‚Ä¢ Garbanzos secos: 500g

**VEGETALES FRESCOS:**
‚Ä¢ Br√≥coli: 1 kg
‚Ä¢ Espinacas: 500g
‚Ä¢ Tomates: 1.5 kg
‚Ä¢ Pimientos: 800g
‚Ä¢ Cebolla: 1 kg

ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS:**
‚Ä¢ Almendras crudas: 250g
‚Ä¢ Nueces: 200g
‚Ä¢ Yogur griego natural: 1 kg
‚Ä¢ Queso feta: 300g
‚Ä¢ Aceitunas kalamata: 200g
‚Ä¢ Miel cruda: 1 bote
‚Ä¢ Aceite oliva virgen extra: 500ml

**ESPECIAS Y HIERBAS:**
‚Ä¢ Oregano seco
‚Ä¢ Tomillo fresco
‚Ä¢ Ajo fresco
‚Ä¢ Jengibre
‚Ä¢ Comino molido

üí° **Tip:** Esta lista est√° optimizada para meal prep semanal seg√∫n tu perfil nutricional.

**Comandos relacionados:**
‚Ä¢ /cronograma - Ver cu√°ndo cocinar cada cosa
‚Ä¢ /menu - Ver c√≥mo se distribuye todo
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['cronograma'])
def cronograma_command(message):
    """Mostrar cronograma de cocci√≥n"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    cooking_schedule = user_profile['settings'].get('cooking_schedule', 'dos_sesiones')
    
    # Obtener datos del cronograma
    schedule_data = meal_bot.data['cooking_schedules'].get(cooking_schedule, {})
    
    response_text = f"""
‚è∞ **CRONOGRAMA DE COCCI√ìN SEMANAL**

üéØ **Tu cronograma:** {schedule_data.get('name', 'Personalizado')}
üìù **Descripci√≥n:** {schedule_data.get('description', 'Cronograma optimizado')}
‚è±Ô∏è **Tiempo estimado:** {schedule_data.get('estimated_time', 'Variable')}

**SESIONES PLANIFICADAS:**
"""
    
    sessions = schedule_data.get('sessions', [])
    for i, session in enumerate(sessions, 1):
        day = session.get('day', 'd√≠a').title()
        duration = session.get('duration', '2-3 horas')
        start_time = session.get('start_time', '10:00')
        tasks = session.get('tasks', [])
        
        response_text += f"""
**SESI√ìN {i} - {day}**
üïê Horario: {start_time}
‚è∞ Duraci√≥n: {duration}
üìã Tareas:
"""
        for task in tasks:
            response_text += f"‚Ä¢ {task.replace('_', ' ').title()}\n"
    
    # Ventajas/desventajas
    pros = schedule_data.get('pros', [])
    cons = schedule_data.get('cons', [])
    
    if pros:
        response_text += "\n‚úÖ **VENTAJAS:**\n"
        for pro in pros:
            response_text += f"‚Ä¢ {pro}\n"
    
    if cons:
        response_text += "\n‚ö†Ô∏è **CONSIDERACIONES:**\n"
        for con in cons:
            response_text += f"‚Ä¢ {con}\n"
    
    response_text += f"""

üí° **OPTIMIZACI√ìN SEG√öN TU PERFIL:**
‚Ä¢ Objetivo: {user_profile['basic_data']['objetivo_descripcion']}
‚Ä¢ Available Energy: {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Macros diarios: {user_profile['macros']['calories']} kcal

**¬øQuieres cambiar tu cronograma?**
Usa /nueva_semana para explorar otras opciones.
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['rating'])
def rating_command(message):
    """Comando para calificar recetas (placeholder)"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Extraer rating del mensaje (formato: /rating receta 1-5 comentario)
    text_parts = message.text.split(' ', 3)
    
    if len(text_parts) < 3:
        bot.send_message(
            message.chat.id,
            "üìä **SISTEMA DE CALIFICACIONES**\n\n"
            "**Uso:** `/rating nombre_receta 1-5 [comentario]`\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ `/rating pollo_quinoa 5 Excelente sabor`\n"
            "‚Ä¢ `/rating lentejas_curry 3 Muy salado`\n"
            "‚Ä¢ `/rating batido_proteina 4`\n\n"
            "**Tu feedback ayuda a mejorar las recetas futuras con IA.**",
            parse_mode='Markdown'
        )
        return
    
    recipe_name = text_parts[1]
    try:
        rating_value = int(text_parts[2])
        if not (1 <= rating_value <= 5):
            raise ValueError
    except (ValueError, IndexError):
        bot.send_message(
            message.chat.id,
            "‚ùå **Error:** La calificaci√≥n debe ser un n√∫mero del 1 al 5."
        )
        return
    
    comment = text_parts[3] if len(text_parts) > 3 else ""
    
    # Simular guardado de rating (se implementar√≠a completamente)
    bot.send_message(
        message.chat.id,
        f"‚≠ê **CALIFICACI√ìN GUARDADA**\n\n"
        f"**Receta:** {recipe_name.replace('_', ' ').title()}\n"
        f"**Puntuaci√≥n:** {rating_value}/5 {'‚≠ê' * rating_value}\n"
        f"**Comentario:** {comment if comment else 'Sin comentario'}\n\n"
        "‚úÖ Tu feedback se usar√° para mejorar futuras recomendaciones con IA.\n\n"
        "üí° **Tip:** Las recetas mejor calificadas aparecer√°n m√°s frecuentemente.",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['favorito'])
def favorito_command(message):
    """Comando para marcar recetas como favoritas (placeholder)"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Extraer nombre de receta
    text_parts = message.text.split(' ', 1)
    
    if len(text_parts) < 2:
        bot.send_message(
            message.chat.id,
            "‚ù§Ô∏è **SISTEMA DE FAVORITOS**\n\n"
            "**Uso:** `/favorito nombre_receta`\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ `/favorito pollo_mediteraneo`\n"
            "‚Ä¢ `/favorito garbanzos_curry`\n"
            "‚Ä¢ `/favorito batido_recovery`\n\n"
            "**Las recetas favoritas tendr√°n prioridad en tus men√∫s semanales.**",
            parse_mode='Markdown'
        )
        return
    
    recipe_name = text_parts[1]
    
    # Simular guardado de favorito
    bot.send_message(
        message.chat.id,
        f"‚ù§Ô∏è **RECETA MARCADA COMO FAVORITA**\n\n"
        f"**Receta:** {recipe_name.replace('_', ' ').title()}\n\n"
        "‚úÖ Esta receta aparecer√° m√°s frecuentemente en tus men√∫s semanales.\n"
        "ü§ñ La IA tendr√° esto en cuenta para futuras recomendaciones.\n\n"
        "**Ver todos tus favoritos:** Pr√≥ximamente con /mis_favoritos",
        parse_mode='Markdown'
    )

# ========================================
# PROCESADORES DE ESTADO
# ========================================

def process_profile_setup(telegram_id: str, message):
    """Procesar configuraci√≥n de perfil paso a paso"""
    user_state = meal_bot.user_states.get(telegram_id, {})
    step = user_state.get("step", "peso")
    data = user_state.get("data", {})
    
    try:
        if step == "peso":
            peso = float(message.text)
            if not (30 <= peso <= 300):
                raise ValueError("Peso fuera de rango v√°lido")
            
            data["peso"] = peso
            meal_bot.user_states[telegram_id]["step"] = "altura"
            meal_bot.user_states[telegram_id]["data"] = data
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Peso registrado: {peso} kg\n\n"
                "üìè **Paso 2/10:** ¬øCu√°l es tu altura en cm?\n"
                "_(Ejemplo: 175)_"
            )
            
        elif step == "altura":
            altura = float(message.text)
            if not (120 <= altura <= 220):
                raise ValueError("Altura fuera de rango v√°lido")
            
            data["altura"] = altura
            meal_bot.user_states[telegram_id]["step"] = "edad"
            meal_bot.user_states[telegram_id]["data"] = data
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Altura registrada: {altura} cm\n\n"
                "üéÇ **Paso 3/10:** ¬øCu√°l es tu edad en a√±os?\n"
                "_(Ejemplo: 25)_"
            )
            
        elif step == "edad":
            edad = int(message.text)
            if not (15 <= edad <= 100):
                raise ValueError("Edad fuera de rango v√°lido")
            
            data["edad"] = edad
            meal_bot.user_states[telegram_id]["step"] = "sexo"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Masculino", "Femenino")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Edad registrada: {edad} a√±os\n\n"
                "‚ößÔ∏è **Paso 4/10:** ¬øCu√°l es tu sexo biol√≥gico?\n"
                "_(Necesario para c√°lculos de BMR precisos)_",
                reply_markup=keyboard
            )
            
        elif step == "sexo":
            sexo = message.text.lower()
            if sexo not in ["masculino", "femenino"]:
                raise ValueError("Sexo debe ser Masculino o Femenino")
            
            data["sexo"] = sexo
            meal_bot.user_states[telegram_id]["step"] = "objetivo"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Bajar peso", "Ganar m√∫sculo")
            keyboard.add("Recomposici√≥n", "Mantener")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Sexo registrado: {sexo}\n\n"
                "üéØ **Paso 5/10:** ¬øCu√°l es tu objetivo principal?\n\n"
                "**Bajar peso:** Perder grasa manteniendo m√∫sculo\n"
                "**Ganar m√∫sculo:** Subir masa minimizando grasa\n"
                "**Recomposici√≥n:** Bajar grasa y ganar m√∫sculo simult√°neamente\n"
                "**Mantener:** Mantener peso y composici√≥n actual",
                reply_markup=keyboard
            )
            
        elif step == "objetivo":
            objetivos_map = {
                "bajar peso": "bajar_peso",
                "ganar m√∫sculo": "subir_masa", 
                "ganar musculo": "subir_masa",
                "recomposici√≥n": "recomposicion",
                "recomposicion": "recomposicion",
                "mantener": "mantener"
            }
            
            objetivo = objetivos_map.get(message.text.lower())
            if not objetivo:
                raise ValueError("Objetivo no v√°lido")
            
            data["objetivo"] = objetivo
            meal_bot.user_states[telegram_id]["step"] = "actividad"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Sedentario", "Ligero")
            keyboard.add("Moderado", "Intenso")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Objetivo registrado: {message.text}\n\n"
                "üèÉ **Paso 6/10:** ¬øCu√°l es tu nivel de actividad general?\n\n"
                "**Sedentario:** Trabajo de oficina, poco ejercicio\n"
                "**Ligero:** Ejercicio ligero 1-3 d√≠as/semana\n"
                "**Moderado:** Ejercicio moderado 3-5 d√≠as/semana\n"
                "**Intenso:** Ejercicio intenso 6-7 d√≠as/semana",
                reply_markup=keyboard
            )
            
        # Continuar con m√°s pasos del perfil...
        # (Se implementar√°n completamente todos los pasos)
        
    except ValueError as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå Error: {str(e)}\n\n"
            "Por favor, introduce un valor v√°lido."
        )

def process_ai_search(telegram_id: str, query: str, message):
    """Procesar b√∫squeda con IA completamente funcional"""
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    if not user_profile:
        bot.send_message(
            message.chat.id,
            "‚ùå **Error:** Necesitas configurar tu perfil primero.\n"
            "Usa /perfil para comenzar.",
            parse_mode='Markdown'
        )
        return
    
    try:
        # Generar recetas con IA
        result = meal_bot.ai_generator.search_and_adapt_recipes(user_profile, query)
        
        if result["success"]:
            results = result["results"]
            total_found = result["total_found"]
            
            if total_found == 0:
                bot.send_message(
                    message.chat.id,
                    f"üîç **B√∫squeda: '{query}'**\n\n"
                    "‚ùå No se encontraron recetas que cumplan tus criterios.\n\n"
                    "üí° **Sugerencias:**\n"
                    "‚Ä¢ Intenta t√©rminos m√°s generales (ej: 'pollo' en lugar de 'pollo al curry')\n"
                    "‚Ä¢ Especifica el timing (ej: 'post entreno')\n"
                    "‚Ä¢ Menciona ingredientes principales\n\n"
                    "**Ejemplos exitosos:**\n"
                    "‚Ä¢ `/buscar proteina post entreno`\n"
                    "‚Ä¢ `/buscar legumbres mediterraneas`\n"
                    "‚Ä¢ `/buscar desayuno alto carbohidratos`",
                    parse_mode='Markdown'
                )
                return
            
            # Mostrar resultados encontrados
            intro_text = f"""
ü§ñ **B√öSQUEDA COMPLETADA CON IA**

**Tu consulta:** '{query}'
‚úÖ **Encontradas:** {total_found} recetas v√°lidas
üìä **Adaptadas** a tu perfil nutricional

üéØ **Tu objetivo:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Tus macros:** {user_profile['macros']['calories']} kcal diarias

**RECETAS GENERADAS:**
"""
            
            meal_bot.send_long_message(message.chat.id, intro_text, parse_mode='Markdown')
            
            # Mostrar cada receta encontrada
            for i, recipe_result in enumerate(results[:3], 1):  # M√°ximo 3 recetas
                recipe = recipe_result.get("adaptacion_propuesta")
                validation = recipe_result.get("validation", {})
                changes = recipe_result.get("cambios_realizados", [])
                
                if recipe:
                    # Formatear receta para display
                    recipe_text = format_recipe_for_display(recipe, validation)
                    
                    # Agregar informaci√≥n de cambios
                    if changes:
                        recipe_text += f"\n\nüîß **Adaptaciones realizadas:**\n"
                        for change in changes:
                            recipe_text += f"‚Ä¢ {change}\n"
                    
                    # Enviar receta
                    meal_bot.send_long_message(
                        message.chat.id, 
                        f"**OPCI√ìN {i}:**\n{recipe_text}",
                        parse_mode='Markdown'
                    )
            
            # Opciones de seguimiento
            followup_text = f"""
üéØ **PR√ìXIMOS PASOS:**

‚Ä¢ **¬øTe gusta alguna receta?** Responde con el n√∫mero (1, 2, 3)
‚Ä¢ **¬øQuieres m√°s opciones?** Env√≠a `/buscar {query} m√°s opciones`
‚Ä¢ **¬øModificar algo?** Escribe qu√© cambiar
‚Ä¢ **¬øGenerar men√∫ completo?** Usa `/nueva_semana`

üí° **Tip:** Todas las recetas est√°n validadas con ingredientes naturales y ajustadas a tus macros.
"""
            
            meal_bot.send_long_message(message.chat.id, followup_text, parse_mode='Markdown')
            
        else:
            # Error en la generaci√≥n
            error_msg = result.get("error", "Error desconocido")
            bot.send_message(
                message.chat.id,
                f"‚ùå **Error en la b√∫squeda:**\n{error_msg}\n\n"
                "üí° **Intenta:**\n"
                "‚Ä¢ Reformular tu consulta\n"
                "‚Ä¢ Usar t√©rminos m√°s espec√≠ficos\n"
                "‚Ä¢ Verificar tu conexi√≥n a internet\n\n"
                "Si el problema persiste, contacta al administrador.",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in AI search: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå **Error t√©cnico** procesando tu b√∫squeda.\n"
            "Int√©ntalo de nuevo en unos momentos.",
            parse_mode='Markdown'
        )
    
    # Limpiar estado
    meal_bot.user_states[telegram_id] = {}

# ========================================
# MANEJADOR DE MENSAJES DE TEXTO
# ========================================

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """Manejar todos los mensajes de texto seg√∫n el estado del usuario"""
    telegram_id = str(message.from_user.id)
    user_state = meal_bot.user_states.get(telegram_id, {})
    
    if user_state.get("state") == "profile_setup":
        process_profile_setup(telegram_id, message)
    elif user_state.get("state") == "schedule_setup":
        process_schedule_setup(telegram_id, message)
    elif user_state.get("state") == "ai_search":
        # B√∫squeda ya procesada
        pass
    else:
        # Mensaje libre - responder con ayuda
        bot.send_message(
            message.chat.id,
            "‚ùì **COMANDOS DISPONIBLES:**\n\n"
            "/perfil - Configurar perfil nutricional\n"
            "/mis_macros - Ver tus macros\n"
            "/menu - Men√∫ semanal\n"
            "/recetas - Explorar recetas\n"
            "/complementos - Ver complementos\n"
            "/buscar [consulta] - Buscar recetas con IA\n"
            "/generar - Generar receta espec√≠fica\n"
            "/nueva_semana - Configurar cronograma\n\n"
            "üí° **Tip:** Empieza configurando tu perfil con /perfil"
        )

def process_schedule_setup(telegram_id: str, message):
    """Procesar configuraci√≥n de cronograma"""
    user_state = meal_bot.user_states.get(telegram_id, {})
    choice = message.text.upper().strip()
    
    schedules = {
        "A": "sesion_unica_domingo",
        "B": "dos_sesiones", 
        "C": "tres_sesiones",
        "D": "preparacion_diaria"
    }
    
    if choice in schedules:
        schedule_id = schedules[choice]
        schedule_data = meal_bot.data["cooking_schedules"][schedule_id]
        
        # Guardar en perfil de usuario (cuando est√© implementado)
        # user_profile["settings"]["cooking_schedule"] = schedule_id
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ **Cronograma seleccionado:** {schedule_data['name']}\n\n"
            f"üìù **Descripci√≥n:** {schedule_data['description']}\n"
            f"‚è±Ô∏è **Tiempo estimado:** {schedule_data['estimated_time']}\n\n"
            "üéØ **Pr√≥ximos pasos:**\n"
            "‚Ä¢ Usa /buscar para generar recetas espec√≠ficas\n"
            "‚Ä¢ Configura tu nivel de variedad semanal\n"
            "‚Ä¢ El sistema optimizar√° tu lista de compras\n\n"
            "**Tu cronograma se aplicar√° autom√°ticamente al generar men√∫s.**",
            parse_mode='Markdown',
            reply_markup=meal_bot.create_main_menu_keyboard()
        )
        
        # Limpiar estado
        meal_bot.user_states[telegram_id] = {}
        
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå **Opci√≥n no v√°lida**\n\n"
            "Por favor responde con A, B, C o D seg√∫n tu preferencia."
        )

# ========================================
# CONFIGURACI√ìN WEBHOOK/POLLING
# ========================================

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """Webhook endpoint para Railway"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 400

def setup_webhook():
    """Configurar webhook si est√° habilitado"""
    if USE_WEBHOOK and WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook configurado: {webhook_url}")
        return True
    return False

def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Iniciando Meal Prep Bot V2.0...")
    
    try:
        # Intentar configurar webhook
        if not setup_webhook():
            logger.info("üì± Iniciando en modo polling...")
            bot.remove_webhook()
            bot.polling(none_stop=True, interval=1, timeout=60)
        else:
            logger.info("üåê Iniciando servidor webhook...")
            # En Railway, el puerto se obtiene de la variable de entorno
            port = int(os.environ.get('PORT', 5000))
            app.run(host='0.0.0.0', port=port, debug=False)
            
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar el bot: {e}")
        raise

if __name__ == "__main__":
    main()