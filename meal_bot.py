#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Meal Prep Bot V2.0 - Sistema completo con perfiles individuales y IA integrada
Integra todos los sistemas nuevos: categor√≠as duales, Available Energy, generaci√≥n IA
"""

import json
import os
import logging
import fcntl
import atexit
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple

import telebot
from telebot import types
from anthropic import Anthropic
from flask import Flask, request

# Importar nuevos sistemas
from user_profile_system import UserProfileSystem
from claude_prompt_system import ClaudePromptSystem
from recipe_validator import RecipeValidator
from ai_integration import AIRecipeGenerator, format_recipe_for_display
from menu_display_system import format_menu_for_telegram

from config import (
    TELEGRAM_TOKEN, ANTHROPIC_API_KEY, WEBHOOK_URL, WEBHOOK_PATH, USE_WEBHOOK
)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Inicializar componentes
bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# Inicializar Claude client
try:
    claude_client = Anthropic(api_key=ANTHROPIC_API_KEY)
    logger.info("‚úÖ Claude client initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Error initializing Claude client: {e}")
    claude_client = None

class MealPrepBotV2:
    def __init__(self):
        self.database_file = "recipes_new.json"
        self.data = self.load_data()
        
        # Inicializar sistemas
        self.profile_system = UserProfileSystem(self.database_file)
        self.prompt_system = ClaudePromptSystem()
        self.validator = RecipeValidator()
        self.ai_generator = AIRecipeGenerator(
            ANTHROPIC_API_KEY, 
            self.prompt_system, 
            self.validator
        )
        
        # Estado de conversaci√≥n por usuario
        self.user_states = {}
        
        logger.info("üöÄ MealPrepBot V2.0 initialized with new architecture")
    
    def load_data(self) -> Dict:
        """Cargar datos de la nueva estructura"""
        try:
            with open(self.database_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"No se encontr√≥ {self.database_file}")
            return self.create_default_data()
        except json.JSONDecodeError:
            logger.error(f"Error al leer {self.database_file}")
            return self.create_default_data()
    
    def create_default_data(self) -> Dict:
        """Crear estructura de datos nueva"""
        with open("recipes_new.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def save_data(self) -> bool:
        """Guardar datos con backup autom√°tico"""
        try:
            # Crear backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"backup_v2_{timestamp}.json"
            
            if os.path.exists(self.database_file):
                with open(self.database_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            # Guardar datos actuales
            with open(self.database_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            logger.error(f"Error al guardar datos: {e}")
            return False
    
    def get_user_profile(self, telegram_id: str) -> Optional[Dict]:
        """Obtener perfil de usuario por Telegram ID"""
        return self.data["users"].get(telegram_id)
    
    def save_generated_recipe(self, telegram_id: str, recipe: Dict, timing_category: str, validation: Dict) -> bool:
        """Guardar receta generada en el perfil del usuario"""
        try:
            user_profile = self.get_user_profile(telegram_id)
            if not user_profile:
                return False
            
            # Inicializar lista de recetas si no existe
            if "generated_recipes" not in user_profile:
                user_profile["generated_recipes"] = []
            
            # Crear entrada de receta con metadata
            recipe_entry = {
                "id": f"{telegram_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "generated_date": datetime.now().isoformat(),
                "timing_category": timing_category,
                "recipe_data": recipe,
                "validation_score": validation.get("score", 0),
                "user_rating": None  # Para futuras mejoras
            }
            
            # Agregar al inicio de la lista (m√°s reciente primero)
            user_profile["generated_recipes"].insert(0, recipe_entry)
            
            # Mantener solo las √∫ltimas 20 recetas por usuario
            if len(user_profile["generated_recipes"]) > 20:
                user_profile["generated_recipes"] = user_profile["generated_recipes"][:20]
            
            # Guardar cambios
            self.data["users"][telegram_id] = user_profile
            return self.save_data()
            
        except Exception as e:
            logger.error(f"Error saving generated recipe for user {telegram_id}: {e}")
            return False
    
    def create_user_if_not_exists(self, telegram_id: str, message) -> bool:
        """Crear usuario si no existe y redirigir a setup de perfil"""
        if telegram_id not in self.data["users"]:
            bot.send_message(
                message.chat.id,
                "üëã ¬°Bienvenido al Meal Prep Bot V2.0!\n\n"
                "Para comenzar, necesito configurar tu perfil nutricional personalizado.\n"
                "Usa el comando /perfil para empezar.",
                reply_markup=self.create_main_menu_keyboard()
            )
            return False
        return True
    
    def create_main_menu_keyboard(self) -> types.ReplyKeyboardMarkup:
        """Crear teclado principal con comandos disponibles"""
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        
        buttons = [
            "/perfil", "/mis_macros",
            "/menu", "/recetas", 
            "/complementos", "/buscar",
            "/generar", "/nueva_semana"
        ]
        
        keyboard.add(*[types.KeyboardButton(btn) for btn in buttons])
        return keyboard
    
    def split_long_message(self, text: str, max_length: int = 4000) -> List[str]:
        """Dividir mensajes largos para Telegram (l√≠mite 4096 caracteres)"""
        if len(text) <= max_length:
            return [text]
        
        messages = []
        current_message = ""
        
        lines = text.split('\n')
        for line in lines:
            if len(current_message + line + '\n') <= max_length:
                current_message += line + '\n'
            else:
                if current_message:
                    messages.append(current_message.strip())
                current_message = line + '\n'
        
        if current_message:
            messages.append(current_message.strip())
        
        return messages
    
    def send_long_message(self, chat_id: int, text: str, **kwargs):
        """Enviar mensaje largo dividi√©ndolo si es necesario"""
        messages = self.split_long_message(text)
        for i, msg in enumerate(messages):
            if i == 0:
                bot.send_message(chat_id, msg, **kwargs)
            else:
                bot.send_message(chat_id, msg, parse_mode=kwargs.get('parse_mode'))

# Crear instancia global del bot
meal_bot = MealPrepBotV2()

# ========================================
# COMANDOS PRINCIPALES
# ========================================

@bot.message_handler(commands=['start'])
def start_command(message):
    """Comando de inicio"""
    telegram_id = str(message.from_user.id)
    
    welcome_text = """
üçΩÔ∏è ¬°Bienvenido al Meal Prep Bot!

Soy tu asistente personal para meal prep con batch cooking. Te ayudo a:

üìÖ Gestionar men√∫s con rotaci√≥n autom√°tica cada 2 semanas
üßÆ Calcular macros personalizados seg√∫n tu perfil
üõí Generar listas de compra categorizadas
‚è∞ Crear cronogramas de cocci√≥n optimizados
ü§ñ Modificar recetas basado en tu feedback

**Comandos disponibles:**
/perfil - Crear tu perfil personalizado
/mis_macros - Ver tus macros calculados
/menu - Ver men√∫ de la semana actual
/recetas - Ver todas las recetas
/buscar consulta - Buscar o crear recetas con IA

ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS:**
/complementos - Ver alimentos simples naturales
/nueva_semana - Rotaci√≥n semanal con complementos

ü§ñ **GENERACI√ìN INTELIGENTE:**
/generar - Crear recetas por timing nutricional

üìä **GESTI√ìN:**
/compras - Lista de compra con complementos
/cronograma - Ver cronograma de cocci√≥n
/timing - Ver timing nutricional personalizado
/rating receta 1-5 comentario - Calificar receta
/favorito receta - Marcar como favorito

Tambi√©n puedes escribirme en lenguaje natural como:
"No me gusta el cilantro en esta receta"
"Quiero m√°s recetas con pollo"

¬°Empecemos! Usa /menu para ver tu men√∫ actual üë®üç≥
"""
    
    meal_bot.send_long_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=meal_bot.create_main_menu_keyboard()
    )

@bot.message_handler(commands=['perfil'])
def perfil_command(message):
    """Comando para configurar perfil de usuario"""
    telegram_id = str(message.from_user.id)
    
    # Iniciar proceso de configuraci√≥n de perfil
    meal_bot.user_states[telegram_id] = {
        "state": "profile_setup",
        "step": "peso",
        "data": {}
    }
    
    bot.send_message(
        message.chat.id,
        "üë§ **CONFIGURACI√ìN DE PERFIL NUTRICIONAL**\n\n"
        "Te har√© algunas preguntas para calcular tus macros personalizados "
        "basados en evidencia cient√≠fica.\n\n"
        "üìè **Paso 1/10:** ¬øCu√°l es tu peso actual en kg?\n"
        "_(Ejemplo: 70)_",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['mis_macros'])
def mis_macros_command(message):
    """Mostrar macros calculados del usuario"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    # Datos del perfil
    basic_data = user_profile["basic_data"]
    body_comp = user_profile["body_composition"]
    energy_data = user_profile["energy_data"]
    macros = user_profile["macros"]
    
    response_text = f"""
üë§ **TU PERFIL NUTRICIONAL**

**DATOS B√ÅSICOS:**
‚Ä¢ Peso: {basic_data['peso']} kg
‚Ä¢ Altura: {basic_data['altura']} cm
‚Ä¢ Edad: {basic_data['edad']} a√±os
‚Ä¢ Objetivo: {basic_data['objetivo_descripcion']}

**COMPOSICI√ìN CORPORAL:**
‚Ä¢ BMR: {body_comp['bmr']} kcal/d√≠a
‚Ä¢ Grasa corporal: {body_comp['body_fat_percentage']}%
‚Ä¢ Masa magra: {body_comp['lean_mass_kg']} kg
‚Ä¢ IMC: {body_comp['bmi']}

**ENERG√çA DISPONIBLE:**
‚Ä¢ Available Energy: {energy_data['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Estado: {energy_data['ea_status']['color']} {energy_data['ea_status']['description']}
‚Ä¢ TDEE: {energy_data['tdee']} kcal/d√≠a
‚Ä¢ Ejercicio diario: {energy_data['daily_exercise_calories']} kcal

**MACROS DIARIOS OBJETIVO:**
ü•© Prote√≠na: {macros['protein_g']}g ({macros['protein_g']*4} kcal)
üçû Carbohidratos: {macros['carbs_g']}g ({macros['carbs_g']*4} kcal)
ü•ë Grasas: {macros['fat_g']}g ({macros['fat_g']*9} kcal)
üî• **TOTAL: {macros['calories']} kcal/d√≠a**

**RECOMENDACI√ìN:**
{energy_data['ea_status']['recommendation']}
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['menu'])
def menu_command(message):
    """Mostrar men√∫ semanal con timing nutricional"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    # Generar men√∫ con timing nutricional
    try:
        menu_text = format_menu_for_telegram(user_profile)
        meal_bot.send_long_message(message.chat.id, menu_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error generating menu: {e}")
        
        # Fallback a men√∫ b√°sico
        fallback_text = f"""
üìÖ **MEN√ö SEMANAL PERSONALIZADO**

üéØ **Objetivo:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Calor√≠as diarias:** {user_profile['macros']['calories']} kcal
‚ö° **Available Energy:** {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a

**TIMING NUTRICIONAL OPTIMIZADO:**

üåÖ **DESAYUNO Y PRE-ENTRENO:**
‚Ä¢ Energ√≠a r√°pida para entrenar
‚Ä¢ Carbohidratos de absorci√≥n r√°pida

üçΩÔ∏è **ALMUERZO Y POST-ENTRENO:**
‚Ä¢ Prote√≠na para recuperaci√≥n muscular
‚Ä¢ Reposici√≥n de gluc√≥geno

üåô **CENA:**
‚Ä¢ Comida balanceada
‚Ä¢ Preparaci√≥n para descanso

ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS:**
‚Ä¢ Distribuidos durante el d√≠a
‚Ä¢ Completan macros faltantes

**Para generar tu men√∫ espec√≠fico:**
‚Ä¢ /generar - Crear recetas por timing
‚Ä¢ /buscar [plato] - Encontrar recetas espec√≠ficas
‚Ä¢ /nueva_semana - Configurar rotaci√≥n completa
"""
        
        meal_bot.send_long_message(message.chat.id, fallback_text, parse_mode='Markdown')

@bot.message_handler(commands=['recetas'])
def recetas_command(message):
    """Mostrar recetas generadas por el usuario"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    generated_recipes = user_profile.get("generated_recipes", [])
    
    if not generated_recipes:
        response_text = """
üìö **TUS RECETAS GENERADAS**

‚ùå **No tienes recetas generadas a√∫n**

Para generar recetas personalizadas:
‚Ä¢ Usa /generar para crear recetas espec√≠ficas por timing
‚Ä¢ Usa /buscar [consulta] para recetas con IA

**CATEGOR√çAS DISPONIBLES:**

‚ö° **PRE-ENTRENO** (15-30 min antes)
üí™ **POST-ENTRENO** (0-30 min despu√©s)  
üçΩÔ∏è **COMIDA PRINCIPAL**
ü•ú **SNACK/COMPLEMENTO**

¬°Genera tu primera receta con /generar!
"""
    else:
        response_text = "üìö **TUS RECETAS GENERADAS**\n\n"
        
        # Agrupar por categor√≠a de timing
        categories = {
            "pre_entreno": "‚ö° **PRE-ENTRENO**",
            "post_entreno": "üí™ **POST-ENTRENO**", 
            "comida_principal": "üçΩÔ∏è **COMIDA PRINCIPAL**",
            "snack_complemento": "ü•ú **SNACK/COMPLEMENTO**"
        }
        
        recipes_by_category = {}
        for recipe in generated_recipes[:10]:  # Mostrar solo las 10 m√°s recientes
            category = recipe["timing_category"]
            if category not in recipes_by_category:
                recipes_by_category[category] = []
            recipes_by_category[category].append(recipe)
        
        for category, category_name in categories.items():
            if category in recipes_by_category:
                response_text += f"\n{category_name}\n"
                for i, recipe in enumerate(recipes_by_category[category][:3], 1):  # M√°ximo 3 por categor√≠a
                    recipe_data = recipe["recipe_data"]
                    name = recipe_data.get("name", "Receta sin nombre")
                    calories = recipe_data.get("macros_per_portion", {}).get("calories", "N/A")
                    score = recipe["validation_score"]
                    date = recipe["generated_date"][:10]  # Solo fecha
                    
                    response_text += f"‚Ä¢ {name}\n"
                    response_text += f"  {calories} kcal ‚Ä¢ ‚≠ê{score}/100 ‚Ä¢ {date}\n"
                response_text += "\n"
        
        total_recipes = len(generated_recipes)
        response_text += f"**Total de recetas:** {total_recipes}\n"
        response_text += f"**Mostrando:** Las m√°s recientes por categor√≠a\n\n"
        response_text += "üí° **Generar m√°s:** /generar\n"
        response_text += "üîç **B√∫squeda espec√≠fica:** /buscar [consulta]"
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['complementos'])
def complementos_command(message):
    """Mostrar complementos mediterr√°neos disponibles"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Mostrar complementos de la base de datos
    complements = meal_bot.data.get("global_complements", {})
    
    response_text = "ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS NATURALES**\n\n"
    
    for category, items in complements.items():
        category_name = category.replace("_", " ").title()
        response_text += f"**{category_name.upper()}:**\n"
        
        for item_id, item_data in items.items():
            name = item_data["name"]
            portion = item_data["portion_size"]
            unit = item_data["unit"]
            macros = item_data["macros_per_portion"]
            
            response_text += f"‚Ä¢ {name} ({portion}{unit})\n"
            response_text += f"  {macros['protein']}P / {macros['carbs']}C / {macros['fat']}G = {macros['calories']} kcal\n"
        
        response_text += "\n"
    
    response_text += """
**TIMING RECOMENDADO:**
üåÖ **Media ma√±ana:** Frutos secos + frutas
üåû **Media tarde:** L√°cteos + aceitunas
üåô **Noche:** Seg√∫n macros faltantes

**Los complementos se calculan autom√°ticamente para completar tus macros diarios.**
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['buscar'])
def buscar_command(message):
    """Comando para buscar/generar recetas con IA"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Extraer consulta del mensaje
    query = message.text.replace('/buscar', '').strip()
    
    if not query:
        bot.send_message(
            message.chat.id,
            "üîç **B√öSQUEDA INTELIGENTE DE RECETAS**\n\n"
            "Usa: `/buscar [tu consulta]`\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ `/buscar pollo post entreno`\n"
            "‚Ä¢ `/buscar legumbres mediterraneas`\n"
            "‚Ä¢ `/buscar snack alto proteina`\n"
            "‚Ä¢ `/buscar desayuno pre entreno`\n\n"
            "La IA generar√° recetas personalizadas seg√∫n tu perfil.",
            parse_mode='Markdown'
        )
        return
    
    # Iniciar b√∫squeda con IA
    meal_bot.user_states[telegram_id] = {
        "state": "ai_search",
        "query": query,
        "step": "processing"
    }
    
    bot.send_message(
        message.chat.id,
        f"ü§ñ **Buscando recetas para:** '{query}'\n\n"
        "‚è≥ Generando opciones personalizadas con IA...\n"
        "üìä Considerando tu perfil nutricional...\n"
        "üçΩÔ∏è Validando ingredientes naturales...",
        parse_mode='Markdown'
    )
    
    # Procesar b√∫squeda (se implementar√° completamente en siguiente fase)
    process_ai_search(telegram_id, query, message)

@bot.message_handler(commands=['nueva_semana'])
def nueva_semana_command(message):
    """Configurar nueva semana con cronograma"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    # Mostrar opciones de cronograma  
    response_text = f"""
üìÖ **CONFIGURAR NUEVA SEMANA**

üë§ **Tu perfil:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Calor√≠as objetivo:** {user_profile['macros']['calories']} kcal/d√≠a

üïê **OPCIONES DE CRONOGRAMA SEMANAL:**

‚≠ê **RECOMENDADO para tu perfil:**
üÖ∞Ô∏è **Sesi√≥n √∫nica domingo** (4-6 horas)
   ‚Ä¢ M√°xima eficiencia meal prep
   ‚Ä¢ Todo listo para la semana
   ‚Ä¢ Tiempo estimado: 4-6 horas

üÖ±Ô∏è **Dos sesiones: Dom + Mi√©r** (2-3 horas c/u)
   ‚Ä¢ Balance eficiencia/frescura
   ‚Ä¢ Comidas m√°s frescas
   ‚Ä¢ Tiempo total: 4-6 horas

üÖ≤Ô∏è **Tres sesiones: Dom/Mar/Vie** (1.5-2 horas c/u)
   ‚Ä¢ M√°xima frescura
   ‚Ä¢ Carga distribuida
   ‚Ä¢ Tiempo total: 4.5-6 horas

üÖ≥Ô∏è **Preparaci√≥n diaria** (20-30 min/d√≠a)
   ‚Ä¢ Comida siempre fresca  
   ‚Ä¢ Sin meal prep masivo
   ‚Ä¢ Tiempo diario: 20-30 min

**Responde con la letra de tu opci√≥n preferida (A, B, C, D)**
"""
    
    meal_bot.user_states[telegram_id] = {
        "state": "schedule_setup",
        "step": "choose_schedule"
    }
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['generar'])
def generar_command(message):
    """Generar receta espec√≠fica por timing y funci√≥n"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Mostrar opciones de generaci√≥n
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # Botones por timing
    keyboard.add(
        types.InlineKeyboardButton("‚ö° Pre-entreno", callback_data="gen_pre_entreno"),
        types.InlineKeyboardButton("üí™ Post-entreno", callback_data="gen_post_entreno")
    )
    keyboard.add(
        types.InlineKeyboardButton("üçΩÔ∏è Comida principal", callback_data="gen_comida_principal"),
        types.InlineKeyboardButton("ü•ú Snack/Complemento", callback_data="gen_snack")
    )
    
    bot.send_message(
        message.chat.id,
        "ü§ñ **GENERACI√ìN ESPEC√çFICA DE RECETAS**\n\n"
        "Selecciona el tipo de receta que quieres generar seg√∫n tu timing nutricional:\n\n"
        "‚ö° **Pre-entreno:** Energ√≠a r√°pida (15-30 min antes)\n"
        "üí™ **Post-entreno:** Recuperaci√≥n muscular (0-30 min despu√©s)\n"
        "üçΩÔ∏è **Comida principal:** Nutrici√≥n balanceada general\n"
        "ü•ú **Snack:** Complemento para ajustar macros\n\n"
        "**La receta se adaptar√° autom√°ticamente a tu perfil nutricional.**",
        parse_mode='Markdown',
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('gen_'))
def handle_generation_callback(call):
    """Manejar callbacks de generaci√≥n de recetas"""
    telegram_id = str(call.from_user.id)
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    if not user_profile:
        bot.answer_callback_query(call.id, "‚ùå Configura tu perfil primero", show_alert=True)
        return
    
    # Mapear callback a par√°metros
    timing_map = {
        "gen_pre_entreno": {
            "timing_category": "pre_entreno",
            "function_category": "energia_rapida",
            "target_macros": {"protein": 10, "carbs": 35, "fat": 5, "calories": 210}
        },
        "gen_post_entreno": {
            "timing_category": "post_entreno", 
            "function_category": "sintesis_proteica",
            "target_macros": {"protein": 35, "carbs": 30, "fat": 8, "calories": 320}
        },
        "gen_comida_principal": {
            "timing_category": "comida_principal",
            "function_category": "equilibrio_nutricional",
            "target_macros": {"protein": 40, "carbs": 50, "fat": 20, "calories": 480}
        },
        "gen_snack": {
            "timing_category": "snack_complemento",
            "function_category": "micronutrientes", 
            "target_macros": {"protein": 15, "carbs": 20, "fat": 12, "calories": 220}
        }
    }
    
    request_data = timing_map.get(call.data)
    if not request_data:
        bot.answer_callback_query(call.id, "‚ùå Opci√≥n no v√°lida", show_alert=True)
        return
    
    bot.answer_callback_query(call.id, "ü§ñ Generando receta personalizada...")
    
    # Mensaje de procesamiento
    processing_msg = bot.send_message(
        call.message.chat.id,
        f"ü§ñ **GENERANDO RECETA PERSONALIZADA**\n\n"
        f"üéØ **Tipo:** {request_data['timing_category'].replace('_', ' ').title()}\n"
        f"‚ö° **Funci√≥n:** {request_data['function_category'].replace('_', ' ').title()}\n"
        f"üìä **Macros objetivo:** {request_data['target_macros']['calories']} kcal\n\n"
        "‚è≥ Procesando con IA...\n"
        "üß¨ Adaptando a tu perfil...\n"
        "‚úÖ Validando ingredientes naturales...",
        parse_mode='Markdown'
    )
    
    try:
        # Generar receta con IA
        result = meal_bot.ai_generator.generate_recipe(user_profile, request_data)
        
        # Borrar mensaje de procesamiento
        bot.delete_message(call.message.chat.id, processing_msg.message_id)
        
        if result["success"]:
            recipe = result["recipe"]
            validation = result["validation"]
            
            # Guardar receta en el perfil del usuario
            timing_category = request_data["timing_category"]
            save_success = meal_bot.save_generated_recipe(telegram_id, recipe, timing_category, validation)
            
            # Formatear y enviar receta
            recipe_text = format_recipe_for_display(recipe, validation)
            
            save_status = "‚úÖ Receta guardada en tu historial" if save_success else "‚ö†Ô∏è Receta no pudo guardarse"
            
            success_text = f"""
üéâ **RECETA GENERADA EXITOSAMENTE**

{recipe_text}

ü§ñ **Generada espec√≠ficamente para tu perfil:**
‚Ä¢ Objetivo: {user_profile['basic_data']['objetivo_descripcion']}
‚Ä¢ Available Energy: {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Todos los ingredientes son naturales y no procesados

{save_status}

üí° **¬øQuieres otra opci√≥n?** Usa el comando /generar de nuevo
"""
            
            meal_bot.send_long_message(call.message.chat.id, success_text, parse_mode='Markdown')
            
        else:
            error_msg = result.get("error", "Error desconocido")
            bot.send_message(
                call.message.chat.id,
                f"‚ùå **Error generando receta:**\n{error_msg}\n\n"
                "üí° **Intenta:**\n"
                "‚Ä¢ Usar /generar de nuevo\n"
                "‚Ä¢ Verificar tu conexi√≥n\n"
                "‚Ä¢ Usar /buscar para b√∫squeda libre",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in recipe generation: {e}")
        bot.delete_message(call.message.chat.id, processing_msg.message_id)
        bot.send_message(
            call.message.chat.id,
            "‚ùå **Error t√©cnico** generando la receta.\n"
            "Int√©ntalo de nuevo en unos momentos.",
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['compras'])
def compras_command(message):
    """Mostrar lista de compras con complementos"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    
    response_text = f"""
üõí **LISTA DE COMPRAS SEMANAL**

üë§ **Tu perfil:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Calor√≠as objetivo:** {user_profile['macros']['calories']} kcal/d√≠a

**PROTE√çNAS:**
‚Ä¢ Pechuga de pollo: 2.5 kg
‚Ä¢ Carne de res magra: 1.5 kg
‚Ä¢ Huevos frescos: 2 docenas
‚Ä¢ Salm√≥n fresco: 800g

**LEGUMBRES Y CEREALES:**
‚Ä¢ Quinoa: 500g
‚Ä¢ Arroz integral: 1 kg
‚Ä¢ Lentejas rojas: 400g
‚Ä¢ Garbanzos secos: 500g

**VEGETALES FRESCOS:**
‚Ä¢ Br√≥coli: 1 kg
‚Ä¢ Espinacas: 500g
‚Ä¢ Tomates: 1.5 kg
‚Ä¢ Pimientos: 800g
‚Ä¢ Cebolla: 1 kg

ü•ú **COMPLEMENTOS MEDITERR√ÅNEOS:**
‚Ä¢ Almendras crudas: 250g
‚Ä¢ Nueces: 200g
‚Ä¢ Yogur griego natural: 1 kg
‚Ä¢ Queso feta: 300g
‚Ä¢ Aceitunas kalamata: 200g
‚Ä¢ Miel cruda: 1 bote
‚Ä¢ Aceite oliva virgen extra: 500ml

**ESPECIAS Y HIERBAS:**
‚Ä¢ Oregano seco
‚Ä¢ Tomillo fresco
‚Ä¢ Ajo fresco
‚Ä¢ Jengibre
‚Ä¢ Comino molido

üí° **Tip:** Esta lista est√° optimizada para meal prep semanal seg√∫n tu perfil nutricional.

**Comandos relacionados:**
‚Ä¢ /cronograma - Ver cu√°ndo cocinar cada cosa
‚Ä¢ /menu - Ver c√≥mo se distribuye todo
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['cronograma'])
def cronograma_command(message):
    """Mostrar cronograma de cocci√≥n"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    if not user_profile:
        bot.send_message(message.chat.id, "‚ùå Error: No se pudo encontrar tu perfil")
        return
    
    # Obtener cronograma con valores por defecto
    cooking_schedule = user_profile.get('settings', {}).get('cooking_schedule', 'dos_sesiones')
    
    # Verificar que existan cooking_schedules en los datos
    if 'cooking_schedules' not in meal_bot.data:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è **CRONOGRAMA NO DISPONIBLE**\n\n"
            "Los datos de cronogramas no est√°n disponibles actualmente.\n"
            "Usa /generar para crear recetas espec√≠ficas por timing."
        )
        return
    
    # Obtener datos del cronograma
    schedule_data = meal_bot.data['cooking_schedules'].get(cooking_schedule, {})
    
    # Si no existe el cronograma espec√≠fico, mostrar cronograma gen√©rico
    if not schedule_data:
        response_text = f"""
‚è∞ **CRONOGRAMA DE COCCI√ìN SEMANAL**

üéØ **Tu cronograma:** Personalizado
üìù **Descripci√≥n:** Cronograma b√°sico de meal prep
‚è±Ô∏è **Tiempo estimado:** 2-4 horas

**SESIONES RECOMENDADAS:**

**SESI√ìN 1 - Domingo**
üïê Horario: 10:00-14:00
‚è∞ Duraci√≥n: 3-4 horas
üìã Tareas:
‚Ä¢ Preparar prote√≠nas principales
‚Ä¢ Cocinar granos y cereales
‚Ä¢ Procesar verduras
‚Ä¢ Porcionar y almacenar

**SESI√ìN 2 - Mi√©rcoles** (opcional)
üïê Horario: 19:00-20:30
‚è∞ Duraci√≥n: 1-2 horas
üìã Tareas:
‚Ä¢ Refrescar verduras
‚Ä¢ Preparar snacks
‚Ä¢ Revisar porciones

‚úÖ **VENTAJAS:**
‚Ä¢ Flexibilidad total
‚Ä¢ Adaptable a cualquier horario
‚Ä¢ Permite experimentar

üí° **OPTIMIZACI√ìN SEG√öN TU PERFIL:**
‚Ä¢ Objetivo: {user_profile['basic_data']['objetivo_descripcion']}
‚Ä¢ Available Energy: {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Macros diarios: {user_profile['macros']['calories']} kcal

**¬øQuieres m√°s opciones?**
Usa /nueva_semana para explorar cronogramas espec√≠ficos.
"""
        meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')
        return
    
    response_text = f"""
‚è∞ **CRONOGRAMA DE COCCI√ìN SEMANAL**

üéØ **Tu cronograma:** {schedule_data.get('name', 'Personalizado')}
üìù **Descripci√≥n:** {schedule_data.get('description', 'Cronograma optimizado')}
‚è±Ô∏è **Tiempo estimado:** {schedule_data.get('estimated_time', 'Variable')}

**SESIONES PLANIFICADAS:**
"""
    
    sessions = schedule_data.get('sessions', [])
    for i, session in enumerate(sessions, 1):
        day = session.get('day', 'd√≠a').title()
        duration = session.get('duration', '2-3 horas')
        start_time = session.get('start_time', '10:00')
        tasks = session.get('tasks', [])
        
        response_text += f"""
**SESI√ìN {i} - {day}**
üïê Horario: {start_time}
‚è∞ Duraci√≥n: {duration}
üìã Tareas:
"""
        for task in tasks:
            response_text += f"‚Ä¢ {task.replace('_', ' ').title()}\n"
    
    # Ventajas/desventajas
    pros = schedule_data.get('pros', [])
    cons = schedule_data.get('cons', [])
    
    if pros:
        response_text += "\n‚úÖ **VENTAJAS:**\n"
        for pro in pros:
            response_text += f"‚Ä¢ {pro}\n"
    
    if cons:
        response_text += "\n‚ö†Ô∏è **CONSIDERACIONES:**\n"
        for con in cons:
            response_text += f"‚Ä¢ {con}\n"
    
    response_text += f"""

üí° **OPTIMIZACI√ìN SEG√öN TU PERFIL:**
‚Ä¢ Objetivo: {user_profile['basic_data']['objetivo_descripcion']}
‚Ä¢ Available Energy: {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Macros diarios: {user_profile['macros']['calories']} kcal

**¬øQuieres cambiar tu cronograma?**
Usa /nueva_semana para explorar otras opciones.
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['timing'])
def timing_command(message):
    """Mostrar timing nutricional personalizado seg√∫n horario de entrenamiento"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    if not user_profile:
        bot.send_message(message.chat.id, "‚ùå Error: No se pudo encontrar tu perfil")
        return
    
    exercise_profile = user_profile.get("exercise_profile", {})
    training_schedule = exercise_profile.get("training_schedule", "variable")
    training_desc = exercise_profile.get("training_schedule_desc", "Variable/Cambia")
    dynamic_timing = exercise_profile.get("dynamic_meal_timing", {})
    timing_desc = exercise_profile.get("timing_description", {})
    objetivo = user_profile["basic_data"]["objetivo_descripcion"]
    
    response_text = f"""
‚è∞ **TU TIMING NUTRICIONAL PERSONALIZADO**

üéØ **Horario de entrenamiento:** {training_desc}
üí™ **Objetivo:** {objetivo}

**DISTRIBUCI√ìN √ìPTIMA DE COMIDAS:**
"""
    
    # Iconos para cada comida
    meal_icons = {
        "desayuno": "üåÖ",
        "almuerzo": "üåû", 
        "merienda": "üåá",
        "cena": "üåô"
    }
    
    # Traducir categor√≠as de timing
    timing_translation = {
        "pre_entreno": "‚ö° PRE-ENTRENO",
        "post_entreno": "üí™ POST-ENTRENO",
        "comida_principal": "üçΩÔ∏è COMIDA PRINCIPAL", 
        "snack_complemento": "ü•ú SNACK/COMPLEMENTO"
    }
    
    for meal, timing_category in dynamic_timing.items():
        icon = meal_icons.get(meal, "üçΩÔ∏è")
        timing_name = timing_translation.get(timing_category, timing_category.title())
        response_text += f"\n{icon} **{meal.title()}:** {timing_name}"
    
    if timing_desc:
        response_text += f"""

üìù **ESTRATEGIA NUTRICIONAL:**
‚Ä¢ **Pre-entreno:** {timing_desc.get('pre_timing', 'Adaptado a tu horario')}
‚Ä¢ **Post-entreno:** {timing_desc.get('post_timing', 'Recuperaci√≥n optimizada')}
‚Ä¢ **Filosof√≠a:** {timing_desc.get('strategy', 'Personalizado seg√∫n tus necesidades')}

üí° **C√ìMO USARLO:**
‚Ä¢ Usa /generar y selecciona el timing de tu pr√≥xima comida
‚Ä¢ Las recetas se adaptar√°n autom√°ticamente a tu horario
‚Ä¢ /recetas te mostrar√° tus recetas organizadas por timing

üîÑ **¬øCambi√≥ tu horario?**
Usa /perfil para actualizar tu horario de entrenamiento.
"""
    else:
        response_text += """

üí° **C√ìMO USARLO:**
‚Ä¢ Usa /generar para crear recetas espec√≠ficas por timing
‚Ä¢ /recetas te mostrar√° todas tus recetas generadas
‚Ä¢ Cada receta est√° optimizada para el momento del d√≠a

üîÑ **¬øQuieres optimizar m√°s?**
Usa /perfil para configurar tu horario de entrenamiento espec√≠fico.
"""
    
    meal_bot.send_long_message(message.chat.id, response_text, parse_mode='Markdown')

@bot.message_handler(commands=['rating'])
def rating_command(message):
    """Comando para calificar recetas (placeholder)"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Extraer rating del mensaje (formato: /rating receta 1-5 comentario)
    text_parts = message.text.split(' ', 3)
    
    if len(text_parts) < 3:
        bot.send_message(
            message.chat.id,
            "üìä **SISTEMA DE CALIFICACIONES**\n\n"
            "**Uso:** `/rating nombre_receta 1-5 [comentario]`\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ `/rating pollo_quinoa 5 Excelente sabor`\n"
            "‚Ä¢ `/rating lentejas_curry 3 Muy salado`\n"
            "‚Ä¢ `/rating batido_proteina 4`\n\n"
            "**Tu feedback ayuda a mejorar las recetas futuras con IA.**",
            parse_mode='Markdown'
        )
        return
    
    recipe_name = text_parts[1]
    try:
        rating_value = int(text_parts[2])
        if not (1 <= rating_value <= 5):
            raise ValueError
    except (ValueError, IndexError):
        bot.send_message(
            message.chat.id,
            "‚ùå **Error:** La calificaci√≥n debe ser un n√∫mero del 1 al 5."
        )
        return
    
    comment = text_parts[3] if len(text_parts) > 3 else ""
    
    # Simular guardado de rating (se implementar√≠a completamente)
    bot.send_message(
        message.chat.id,
        f"‚≠ê **CALIFICACI√ìN GUARDADA**\n\n"
        f"**Receta:** {recipe_name.replace('_', ' ').title()}\n"
        f"**Puntuaci√≥n:** {rating_value}/5 {'‚≠ê' * rating_value}\n"
        f"**Comentario:** {comment if comment else 'Sin comentario'}\n\n"
        "‚úÖ Tu feedback se usar√° para mejorar futuras recomendaciones con IA.\n\n"
        "üí° **Tip:** Las recetas mejor calificadas aparecer√°n m√°s frecuentemente.",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['favorito'])
def favorito_command(message):
    """Comando para marcar recetas como favoritas (placeholder)"""
    telegram_id = str(message.from_user.id)
    
    if not meal_bot.create_user_if_not_exists(telegram_id, message):
        return
    
    # Extraer nombre de receta
    text_parts = message.text.split(' ', 1)
    
    if len(text_parts) < 2:
        bot.send_message(
            message.chat.id,
            "‚ù§Ô∏è **SISTEMA DE FAVORITOS**\n\n"
            "**Uso:** `/favorito nombre_receta`\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ `/favorito pollo_mediteraneo`\n"
            "‚Ä¢ `/favorito garbanzos_curry`\n"
            "‚Ä¢ `/favorito batido_recovery`\n\n"
            "**Las recetas favoritas tendr√°n prioridad en tus men√∫s semanales.**",
            parse_mode='Markdown'
        )
        return
    
    recipe_name = text_parts[1]
    
    # Simular guardado de favorito
    bot.send_message(
        message.chat.id,
        f"‚ù§Ô∏è **RECETA MARCADA COMO FAVORITA**\n\n"
        f"**Receta:** {recipe_name.replace('_', ' ').title()}\n\n"
        "‚úÖ Esta receta aparecer√° m√°s frecuentemente en tus men√∫s semanales.\n"
        "ü§ñ La IA tendr√° esto en cuenta para futuras recomendaciones.\n\n"
        "**Ver todos tus favoritos:** Pr√≥ximamente con /mis_favoritos",
        parse_mode='Markdown'
    )

# ========================================
# PROCESADORES DE ESTADO
# ========================================

def process_profile_setup(telegram_id: str, message):
    """Procesar configuraci√≥n de perfil paso a paso"""
    user_state = meal_bot.user_states.get(telegram_id, {})
    step = user_state.get("step", "peso")
    data = user_state.get("data", {})
    
    try:
        if step == "peso":
            peso = float(message.text)
            if not (30 <= peso <= 300):
                raise ValueError("Peso fuera de rango v√°lido")
            
            data["peso"] = peso
            meal_bot.user_states[telegram_id]["step"] = "altura"
            meal_bot.user_states[telegram_id]["data"] = data
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Peso registrado: {peso} kg\n\n"
                "üìè **Paso 2/10:** ¬øCu√°l es tu altura en cm?\n"
                "_(Ejemplo: 175)_"
            )
            
        elif step == "altura":
            altura = float(message.text)
            if not (120 <= altura <= 220):
                raise ValueError("Altura fuera de rango v√°lido")
            
            data["altura"] = altura
            meal_bot.user_states[telegram_id]["step"] = "edad"
            meal_bot.user_states[telegram_id]["data"] = data
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Altura registrada: {altura} cm\n\n"
                "üéÇ **Paso 3/10:** ¬øCu√°l es tu edad en a√±os?\n"
                "_(Ejemplo: 25)_"
            )
            
        elif step == "edad":
            edad = int(message.text)
            if not (15 <= edad <= 100):
                raise ValueError("Edad fuera de rango v√°lido")
            
            data["edad"] = edad
            meal_bot.user_states[telegram_id]["step"] = "sexo"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Masculino", "Femenino")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Edad registrada: {edad} a√±os\n\n"
                "‚ößÔ∏è **Paso 4/10:** ¬øCu√°l es tu sexo biol√≥gico?\n"
                "_(Necesario para c√°lculos de BMR precisos)_",
                reply_markup=keyboard
            )
            
        elif step == "sexo":
            sexo = message.text.lower()
            if sexo not in ["masculino", "femenino"]:
                raise ValueError("Sexo debe ser Masculino o Femenino")
            
            data["sexo"] = sexo
            meal_bot.user_states[telegram_id]["step"] = "objetivo"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Bajar peso", "Ganar m√∫sculo")
            keyboard.add("Ganancia limpia", "Recomposici√≥n")
            keyboard.add("Mantener")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Sexo registrado: {sexo}\n\n"
                "üéØ **Paso 5/10:** ¬øCu√°l es tu objetivo principal?\n\n"
                "**Bajar peso:** Perder grasa manteniendo m√∫sculo\n"
                "**Ganar m√∫sculo:** Super√°vit controlado (200-300 kcal)\n"
                "**Ganancia limpia:** Ultra-limpia (150-250 kcal super√°vit)\n"
                "**Recomposici√≥n:** Bajar grasa y ganar m√∫sculo simult√°neamente\n"
                "**Mantener:** Mantener peso y composici√≥n actual",
                reply_markup=keyboard
            )
            
        elif step == "objetivo":
            objetivos_map = {
                "bajar peso": "bajar_peso",
                "ganar m√∫sculo": "subir_masa", 
                "ganar musculo": "subir_masa",
                "ganancia limpia": "subir_masa_lean",
                "recomposici√≥n": "recomposicion",
                "recomposicion": "recomposicion",
                "mantener": "mantener"
            }
            
            objetivo = objetivos_map.get(message.text.lower())
            if not objetivo:
                raise ValueError("Objetivo no v√°lido")
            
            data["objetivo"] = objetivo
            meal_bot.user_states[telegram_id]["step"] = "actividad"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Sedentario", "Ligero")
            keyboard.add("Moderado", "Intenso")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Objetivo registrado: {message.text}\n\n"
                "üèÉ **Paso 6/10:** ¬øCu√°l es tu nivel de actividad general?\n\n"
                "**Sedentario:** Trabajo de oficina, poco ejercicio\n"
                "**Ligero:** Ejercicio ligero 1-3 d√≠as/semana\n"
                "**Moderado:** Ejercicio moderado 3-5 d√≠as/semana\n"
                "**Intenso:** Ejercicio intenso 6-7 d√≠as/semana",
                reply_markup=keyboard
            )
            
        elif step == "actividad":
            actividad_map = {
                "sedentario": 1.2,
                "ligero": 1.375, 
                "moderado": 1.55,
                "intenso": 1.725
            }
            
            actividad = actividad_map.get(message.text.lower())
            if not actividad:
                raise ValueError("Nivel de actividad no v√°lido")
            
            data["activity_factor"] = actividad
            meal_bot.user_states[telegram_id]["step"] = "ejercicio_tipo"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("Fuerza/Pesas", "Cardio")
            keyboard.add("Deportes", "HIIT")
            keyboard.add("Mixto", "Solo dieta")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Actividad registrada: {message.text}\n\n"
                "üèãÔ∏è **Paso 7/10:** ¬øQu√© tipo de ejercicio haces principalmente?\n\n"
                "**Fuerza/Pesas:** Entrenamiento con resistencias\n"
                "**Cardio:** Running, ciclismo, nataci√≥n\n"
                "**Deportes:** F√∫tbol, tenis, baloncesto\n"
                "**HIIT:** Entrenamientos de alta intensidad\n"
                "**Mixto:** Combinaci√≥n de varios tipos\n"
                "**Solo dieta:** No hago ejercicio actualmente",
                reply_markup=keyboard
            )
            
        elif step == "ejercicio_tipo":
            tipos_ejercicio = {
                "fuerza/pesas": "fuerza",
                "cardio": "cardio", 
                "deportes": "deportes",
                "hiit": "hiit",
                "mixto": "mixto",
                "solo dieta": "ninguno"
            }
            
            tipo_ejercicio = tipos_ejercicio.get(message.text.lower())
            if not tipo_ejercicio:
                raise ValueError("Tipo de ejercicio no v√°lido")
            
            data["ejercicio_tipo"] = tipo_ejercicio
            meal_bot.user_states[telegram_id]["step"] = "frecuencia"
            meal_bot.user_states[telegram_id]["data"] = data
            
            if tipo_ejercicio == "ninguno":
                # Saltar frecuencia si no hace ejercicio
                data["frecuencia_semanal"] = 0
                data["duracion_promedio"] = 0
                meal_bot.user_states[telegram_id]["step"] = "preferencias"
                meal_bot.user_states[telegram_id]["data"] = data
                
                keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                keyboard.add("Continuar con preferencias")
                
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ Registrado: {message.text}\n\n"
                    "‚è≠Ô∏è **Saltando al paso 9/10**\n\n"
                    "üçΩÔ∏è **Paso 9/10:** Configuremos tus preferencias alimentarias.\n"
                    "Presiona el bot√≥n para continuar.",
                    reply_markup=keyboard
                )
            else:
                keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
                keyboard.add("1-2 d√≠as", "3-4 d√≠as", "5-6 d√≠as")
                keyboard.add("Todos los d√≠as")
                
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ Ejercicio registrado: {message.text}\n\n"
                    "üìÖ **Paso 8/10:** ¬øCu√°ntos d√≠as por semana entrenas?\n\n"
                    "Solo indica la frecuencia total de entrenamiento.",
                    reply_markup=keyboard
                )
            
        elif step == "frecuencia":
            # Procesamiento flexible de frecuencia
            text = message.text.lower().strip()
            
            # Mapear variaciones de texto a frecuencia num√©rica
            if any(keyword in text for keyword in ["1", "2", "1-2", "uno", "dos"]):
                frecuencia = 1.5
            elif any(keyword in text for keyword in ["3", "4", "3-4", "tres", "cuatro"]):
                frecuencia = 3.5
            elif any(keyword in text for keyword in ["5", "6", "5-6", "cinco", "seis"]):
                frecuencia = 5.5
            elif any(keyword in text for keyword in ["7", "todos", "diario", "diaria"]):
                frecuencia = 7
            else:
                # Intentar extraer n√∫mero espec√≠fico
                import re
                numbers = re.findall(r'\d+', text)
                if numbers:
                    num_days = int(numbers[0])
                    if 1 <= num_days <= 2:
                        frecuencia = 1.5
                    elif 3 <= num_days <= 4:
                        frecuencia = 3.5
                    elif 5 <= num_days <= 6:
                        frecuencia = 5.5
                    elif num_days >= 7:
                        frecuencia = 7
                    else:
                        frecuencia = None
                else:
                    frecuencia = None
            
            if not frecuencia:
                bot.send_message(
                    message.chat.id,
                    "‚ùå **No pude entender la frecuencia.**\n\n"
                    "Por favor, usa los botones del teclado o escribe:\n"
                    "‚Ä¢ **1-2 d√≠as** por semana\n"
                    "‚Ä¢ **3-4 d√≠as** por semana\n" 
                    "‚Ä¢ **5-6 d√≠as** por semana\n"
                    "‚Ä¢ **Todos los d√≠as**"
                )
                return
            
            data["frecuencia_semanal"] = frecuencia
            meal_bot.user_states[telegram_id]["step"] = "duracion"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("30-45 min", "45-60 min")
            keyboard.add("60-90 min", "90+ min")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Frecuencia registrada: {message.text}\n\n"
                "‚è±Ô∏è **Paso 8B/10:** ¬øCu√°nto dura cada sesi√≥n de entrenamiento?\n\n"
                "Tiempo promedio por sesi√≥n incluyendo calentamiento.",
                reply_markup=keyboard
            )
            
        elif step == "duracion":
            # Procesamiento flexible de duraci√≥n
            text = message.text.lower().strip()
            
            # Extraer n√∫meros del texto
            import re
            numbers = re.findall(r'\d+', text)
            
            if numbers:
                # Usar el primer n√∫mero encontrado como referencia
                duration_num = int(numbers[0])
                
                if duration_num <= 30:
                    duracion = 30
                elif duration_num <= 45:
                    duracion = 37.5
                elif duration_num <= 60:
                    duracion = 52.5
                elif duration_num <= 90:
                    duracion = 75
                else:
                    duracion = 105
            elif any(keyword in text for keyword in ["30", "45", "corta", "rapida"]):
                duracion = 37.5
            elif any(keyword in text for keyword in ["60", "hora", "normal"]):
                duracion = 52.5
            elif any(keyword in text for keyword in ["90", "larga", "intensa"]):
                duracion = 75
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå **No pude entender la duraci√≥n.**\n\n"
                    "Por favor, usa los botones del teclado o escribe un tiempo como:\n"
                    "‚Ä¢ **30-45 minutos**\n"
                    "‚Ä¢ **60 minutos**\n"
                    "‚Ä¢ **90 minutos**"
                )
                return
            
            data["duracion_promedio"] = duracion
            meal_bot.user_states[telegram_id]["data"] = data
            
            # Ir a horario de entrenamiento
            meal_bot.user_states[telegram_id]["step"] = "horario_entrenamiento"
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("üåÖ Ma√±ana (6:00-12:00)", "üåû Mediod√≠a (12:00-16:00)")
            keyboard.add("üåá Tarde (16:00-20:00)", "üåô Noche (20:00-24:00)")
            keyboard.add("üîÑ Variable/Cambia")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Duraci√≥n registrada: {message.text}\n\n"
                "‚è∞ **Paso 8C/10:** ¬øA qu√© hora entrenas normalmente?\n\n"
                "**Esto nos ayuda a optimizar tu timing nutricional:**\n"
                "‚Ä¢ Pre-entreno: 30-60 min antes\n"
                "‚Ä¢ Post-entreno: inmediatamente despu√©s\n"
                "‚Ä¢ Comidas principales: horarios que no interfieran\n\n"
                "**Selecciona tu horario habitual:**",
                reply_markup=keyboard
            )
            
        elif step == "horario_entrenamiento":
            # Procesar horario de entrenamiento
            text = message.text.lower().strip()
            
            # Mapear texto a valores estructurados
            if "ma√±ana" in text or "6:00-12:00" in text:
                horario = "ma√±ana"
                horario_desc = "Ma√±ana (6:00-12:00)"
            elif "mediod√≠a" in text or "mediodia" in text or "12:00-16:00" in text:
                horario = "mediodia" 
                horario_desc = "Mediod√≠a (12:00-16:00)"
            elif "tarde" in text or "16:00-20:00" in text:
                horario = "tarde"
                horario_desc = "Tarde (16:00-20:00)"
            elif "noche" in text or "20:00-24:00" in text:
                horario = "noche"
                horario_desc = "Noche (20:00-24:00)"
            elif "variable" in text or "cambia" in text:
                horario = "variable"
                horario_desc = "Variable/Cambia"
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå **No reconoc√≠ ese horario.**\n\n"
                    "Por favor usa los botones o escribe: ma√±ana, mediod√≠a, tarde, noche, o variable."
                )
                return
            
            data["horario_entrenamiento"] = horario
            data["horario_entrenamiento_desc"] = horario_desc
            meal_bot.user_states[telegram_id]["data"] = data
            
            # Ir a preferencias de prote√≠nas
            meal_bot.user_states[telegram_id]["step"] = "gustos_proteinas"
            
            # Inicializar lista de prote√≠nas vac√≠a
            data["liked_proteins"] = []
            
            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            keyboard.add("üçó Pollo", "ü•© Ternera", "üêü Pescado")
            keyboard.add("ü•ö Huevos", "ü´ò Legumbres", "üßÄ L√°cteos") 
            keyboard.add("üå∞ Frutos secos", "‚úÖ Todas", "‚è≠Ô∏è Ninguna especial")
            keyboard.add("‚û°Ô∏è Continuar")
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Horario registrado: {horario_desc}\n\n"
                "üçΩÔ∏è **Paso 9A/10:** ¬øQu√© PROTE√çNAS prefieres?\n\n"
                "**Opciones disponibles:**\n"
                "‚Ä¢ üçó Pollo\n"
                "‚Ä¢ ü•© Ternera  \n"
                "‚Ä¢ üêü Pescado\n"
                "‚Ä¢ ü•ö Huevos\n"
                "‚Ä¢ ü´ò Legumbres\n"
                "‚Ä¢ üßÄ L√°cteos\n"
                "‚Ä¢ üå∞ Frutos secos\n"
                "‚Ä¢ ‚úÖ Todas\n"
                "‚Ä¢ ‚è≠Ô∏è Ninguna especial\n\n"
                "**PUEDES SELECCIONAR M√öLTIPLES OPCIONES**\n"
                "Usa ‚û°Ô∏è **Continuar** cuando termines de seleccionar:",
                reply_markup=keyboard
            )
            
        elif step == "gustos_proteinas":
            # Procesar selecci√≥n m√∫ltiple de prote√≠nas
            text = message.text.lower().strip()
            
            # Inicializar lista si no existe
            if "liked_proteins" not in data:
                data["liked_proteins"] = []
            
            # Verificar si quiere continuar
            if "continuar" in text or text == "‚û°Ô∏è continuar":
                # Continuar al siguiente paso
                pass
            elif "ninguna" in text or text == "‚è≠Ô∏è ninguna especial":
                data["liked_proteins"] = []
            elif "todas" in text or text == "‚úÖ todas":
                data["liked_proteins"] = ["pollo", "ternera", "pescado", "huevos", "legumbres", "lacteos", "frutos_secos"]
            else:
                # Mapear tanto emojis como texto
                protein_map = {
                    "üçó pollo": "pollo", "pollo": "pollo",
                    "ü•© ternera": "ternera", "ternera": "ternera", "carne": "ternera",
                    "üêü pescado": "pescado", "pescado": "pescado", "pez": "pescado",
                    "ü•ö huevos": "huevos", "huevos": "huevos", "huevo": "huevos",
                    "ü´ò legumbres": "legumbres", "legumbres": "legumbres", "lentejas": "legumbres",
                    "üßÄ l√°cteos": "lacteos", "lacteos": "lacteos", "queso": "lacteos", "yogur": "lacteos",
                    "üå∞ frutos secos": "frutos_secos", "frutos secos": "frutos_secos", "nueces": "frutos_secos"
                }
                
                selected = None
                for key, value in protein_map.items():
                    if key in text or text in key:
                        selected = value
                        break
                
                if selected:
                    # Agregar a la lista si no est√° ya incluido
                    if selected not in data["liked_proteins"]:
                        data["liked_proteins"].append(selected)
                        
                    # Mostrar selecci√≥n actual y continuar
                    selected_names = [name.replace("_", " ").title() for name in data["liked_proteins"]]
                    selection_text = ", ".join(selected_names) if selected_names else "Ninguna"
                    
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ **{selected.replace('_', ' ').title()}** a√±adido\n\n"
                        f"**Seleccionados:** {selection_text}\n\n"
                        "Puedes seleccionar m√°s opciones o usar ‚û°Ô∏è **Continuar**"
                    )
                    return  # Mantener en el mismo paso
                else:
                    # Si no reconoce la entrada, pedir clarificaci√≥n
                    bot.send_message(
                        message.chat.id,
                        "‚ùå No reconoc√≠ esa opci√≥n. Por favor usa los botones o escribe: pollo, ternera, pescado, huevos, legumbres, lacteos, frutos secos, todas, ninguna, o continuar."
                    )
                    return
            
            meal_bot.user_states[telegram_id]["step"] = "gustos_carbos"
            meal_bot.user_states[telegram_id]["data"] = data
            
            # Inicializar lista de carbohidratos
            data["liked_carbs"] = []
            
            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            keyboard.add("üçö Arroz", "üåæ Quinoa", "üçû Avena")
            keyboard.add("ü•î Patatas", "üçù Pasta", "ü´ì Pan integral")
            keyboard.add("üçå Frutas", "‚úÖ Todas", "‚è≠Ô∏è Ninguna especial")
            keyboard.add("‚û°Ô∏è Continuar")
            
            selected_proteins = [name.replace("_", " ").title() for name in data["liked_proteins"]]
            protein_text = ", ".join(selected_proteins) if selected_proteins else "Ninguna"
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Prote√≠nas registradas: {protein_text}\n\n"
                "üçΩÔ∏è **Paso 9B/10:** ¬øQu√© CARBOHIDRATOS prefieres?\n\n"
                "**Opciones disponibles:**\n"
                "‚Ä¢ üçö Arroz\n"
                "‚Ä¢ üåæ Quinoa\n"
                "‚Ä¢ üçû Avena\n"
                "‚Ä¢ ü•î Patatas\n"
                "‚Ä¢ üçù Pasta\n"
                "‚Ä¢ ü´ì Pan integral\n"
                "‚Ä¢ üçå Frutas\n"
                "‚Ä¢ ‚úÖ Todas\n"
                "‚Ä¢ ‚è≠Ô∏è Ninguna especial\n\n"
                "**PUEDES SELECCIONAR M√öLTIPLES OPCIONES**\n"
                "Usa ‚û°Ô∏è **Continuar** cuando termines de seleccionar:",
                reply_markup=keyboard
            )
            
        elif step == "gustos_carbos":
            # Procesar selecci√≥n m√∫ltiple de carbohidratos
            text = message.text.lower().strip()
            
            # Inicializar lista si no existe
            if "liked_carbs" not in data:
                data["liked_carbs"] = []
            
            # Verificar si quiere continuar
            if "continuar" in text or text == "‚û°Ô∏è continuar":
                # Continuar al siguiente paso
                pass
            elif "ninguna" in text or text == "‚è≠Ô∏è ninguna especial":
                data["liked_carbs"] = []
            elif "todas" in text or text == "‚úÖ todas":
                data["liked_carbs"] = ["arroz", "quinoa", "avena", "patatas", "pasta", "pan_integral", "frutas"]
            else:
                carb_map = {
                    "üçö arroz": "arroz", "arroz": "arroz",
                    "üåæ quinoa": "quinoa", "quinoa": "quinoa",
                    "üçû avena": "avena", "avena": "avena",
                    "ü•î patatas": "patatas", "patatas": "patatas", "papa": "patatas",
                    "üçù pasta": "pasta", "pasta": "pasta",
                    "ü´ì pan integral": "pan_integral", "pan integral": "pan_integral", "pan": "pan_integral",
                    "üçå frutas": "frutas", "frutas": "frutas", "fruta": "frutas"
                }
                
                selected = None
                for key, value in carb_map.items():
                    if key in text or text in key:
                        selected = value
                        break
                
                if selected:
                    # Agregar a la lista si no est√° ya incluido
                    if selected not in data["liked_carbs"]:
                        data["liked_carbs"].append(selected)
                        
                    # Mostrar selecci√≥n actual y continuar
                    selected_names = [name.replace("_", " ").title() for name in data["liked_carbs"]]
                    selection_text = ", ".join(selected_names) if selected_names else "Ninguna"
                    
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ **{selected.replace('_', ' ').title()}** a√±adido\n\n"
                        f"**Seleccionados:** {selection_text}\n\n"
                        "Puedes seleccionar m√°s opciones o usar ‚û°Ô∏è **Continuar**"
                    )
                    return  # Mantener en el mismo paso
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå No reconoc√≠ esa opci√≥n. Por favor usa los botones o escribe: arroz, quinoa, avena, patatas, pasta, pan integral, frutas, todas, ninguna, o continuar."
                    )
                    return
            
            meal_bot.user_states[telegram_id]["step"] = "gustos_verduras"
            meal_bot.user_states[telegram_id]["data"] = data
            
            # Inicializar lista de verduras
            data["liked_vegetables"] = []
            
            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            keyboard.add("ü•¨ Hojas verdes", "ü•¶ Cruc√≠feras", "üçÖ Solan√°ceas")
            keyboard.add("üßÑ Arom√°ticas", "ü•ï Ra√≠ces", "ü´ë Pimientos")
            keyboard.add("ü•í Pepin√°ceas", "‚úÖ Todas", "‚è≠Ô∏è Ninguna especial")
            keyboard.add("‚û°Ô∏è Continuar")
            
            selected_carbs = [name.replace("_", " ").title() for name in data["liked_carbs"]]
            carb_text = ", ".join(selected_carbs) if selected_carbs else "Ninguna"
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ Carbohidratos registrados: {carb_text}\n\n"
                "üçΩÔ∏è **Paso 9C/10:** ¬øQu√© VERDURAS prefieres?\n\n"
                "**Familias de vegetales disponibles:**\n"
                "‚Ä¢ ü•¨ Hojas verdes\n"
                "‚Ä¢ ü•¶ Cruc√≠feras\n"
                "‚Ä¢ üçÖ Solan√°ceas\n"
                "‚Ä¢ üßÑ Arom√°ticas\n"
                "‚Ä¢ ü•ï Ra√≠ces\n"
                "‚Ä¢ ü´ë Pimientos\n"
                "‚Ä¢ ü•í Pepin√°ceas\n"
                "‚Ä¢ ‚úÖ Todas\n"
                "‚Ä¢ ‚è≠Ô∏è Ninguna especial\n\n"
                "**PUEDES SELECCIONAR M√öLTIPLES OPCIONES**\n"
                "Usa ‚û°Ô∏è **Continuar** cuando termines de seleccionar:",
                reply_markup=keyboard
            )
            
        elif step == "gustos_verduras":
            # Procesar verduras con manejo flexible
            text = message.text.lower().strip()
            
            if "ninguna" in text or text == "‚è≠Ô∏è ninguna especial":
                data["liked_vegetables"] = []
            elif "todas" in text or text == "‚úÖ todas":
                data["liked_vegetables"] = ["hojas_verdes", "cruciferas", "solanaceas", "aromaticas", "raices", "pimientos", "pepinaceas"]
            else:
                veg_map = {
                    "ü•¨ hojas verdes": "hojas_verdes", "hojas verdes": "hojas_verdes", "espinaca": "hojas_verdes", "lechuga": "hojas_verdes",
                    "ü•¶ cruc√≠feras": "cruciferas", "cruciferas": "cruciferas", "brocoli": "cruciferas", "coliflor": "cruciferas",
                    "üçÖ solan√°ceas": "solanaceas", "solanaceas": "solanaceas", "tomate": "solanaceas", "berenjena": "solanaceas",
                    "üßÑ arom√°ticas": "aromaticas", "aromaticas": "aromaticas", "ajo": "aromaticas", "cebolla": "aromaticas",
                    "ü•ï ra√≠ces": "raices", "raices": "raices", "zanahoria": "raices", "remolacha": "raices",
                    "ü´ë pimientos": "pimientos", "pimientos": "pimientos", "pimiento": "pimientos",
                    "ü•í pepin√°ceas": "pepinaceas", "pepinaceas": "pepinaceas", "pepino": "pepinaceas", "calabacin": "pepinaceas"
                }
                
                selected = None
                for key, value in veg_map.items():
                    if key in text or text in key:
                        selected = value
                        break
                
                if selected:
                    data["liked_vegetables"] = [selected]
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå No reconoc√≠ esa opci√≥n. Por favor usa los botones o escribe: hojas verdes, cruciferas, solanaceas, aromaticas, raices, pimientos, pepinaceas, todas, o ninguna."
                    )
                    return
            
            meal_bot.user_states[telegram_id]["step"] = "disgustos"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            keyboard.add("üêü Pescado", "ü•õ L√°cteos", "üå∂Ô∏è Picante")
            keyboard.add("üßÑ Ajo/Cebolla", "ü•ú Frutos secos", "üçÑ Hongos")
            keyboard.add("üåø Cilantro", "‚è≠Ô∏è Sin restricciones", "üìù Otros")
            
            bot.send_message(
                message.chat.id,
                "‚úÖ Verduras registradas\n\n"
                "üö´ **Paso 9D/10:** ¬øQu√© alimentos prefieres EVITAR?\n\n"
                "**Opciones disponibles:**\n"
                "‚Ä¢ üêü Pescado\n"
                "‚Ä¢ ü•õ L√°cteos\n"
                "‚Ä¢ üå∂Ô∏è Picante\n"
                "‚Ä¢ üßÑ Ajo/Cebolla\n"
                "‚Ä¢ ü•ú Frutos secos\n"
                "‚Ä¢ üçÑ Hongos\n"
                "‚Ä¢ üåø Cilantro\n"
                "‚Ä¢ ‚è≠Ô∏è Sin restricciones\n"
                "‚Ä¢ üìù Otros\n\n"
                "Puedes usar los botones o escribir el nombre:",
                reply_markup=keyboard
            )
            
            
        elif step == "disgustos":
            # Procesar alimentos a evitar con manejo flexible
            text = message.text.lower().strip()
            
            if "sin restricciones" in text or "ninguna" in text:
                data["disliked_foods"] = []
            elif "otros" in text or text == "üìù otros":
                # Permitir texto libre para casos espec√≠ficos
                meal_bot.user_states[telegram_id]["step"] = "disgustos_texto"
                bot.send_message(
                    message.chat.id,
                    "üìù **Escribe otros alimentos que prefieres evitar:**\n\n"
                    "Ejemplos: mariscos, gluten, soja, c√≠tricos\n\n"
                    "Sep√°ralos por comas o escribe 'ninguno':"
                )
                return
            else:
                dislike_map = {
                    "üêü pescado": "pescado", "pescado": "pescado", "pez": "pescado",
                    "ü•õ l√°cteos": "lacteos", "lacteos": "lacteos", "leche": "lacteos", "queso": "lacteos",
                    "üå∂Ô∏è picante": "picante", "picante": "picante", "chile": "picante",
                    "üßÑ ajo/cebolla": "ajo_cebolla", "ajo": "ajo_cebolla", "cebolla": "ajo_cebolla",
                    "ü•ú frutos secos": "frutos_secos", "frutos secos": "frutos_secos", "nueces": "frutos_secos",
                    "üçÑ hongos": "hongos", "hongos": "hongos", "setas": "hongos",
                    "üåø cilantro": "cilantro", "cilantro": "cilantro"
                }
                
                selected = None
                for key, value in dislike_map.items():
                    if key in text or text in key:
                        selected = value
                        break
                
                if selected:
                    data["disliked_foods"] = [selected]
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå No reconoc√≠ esa opci√≥n. Por favor usa los botones o escribe: pescado, lacteos, picante, ajo, cebolla, frutos secos, hongos, cilantro, sin restricciones, u otros."
                    )
                    return
            
            meal_bot.user_states[telegram_id]["step"] = "restricciones"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("üö´ Alergias", "üå± Vegano")
            keyboard.add("ü•õ Sin lactosa", "üåæ Sin gluten")
            keyboard.add("üïå Halal", "‚ú°Ô∏è Kosher")
            keyboard.add("‚è≠Ô∏è Sin restricciones especiales")
            
            bot.send_message(
                message.chat.id,
                "‚úÖ Alimentos a evitar registrados\n\n"
                "‚ö†Ô∏è **Paso 9E/10:** ¬øTienes alguna RESTRICCI√ìN ESPECIAL?\n\n"
                "**Opciones disponibles:**\n"
                "‚Ä¢ üö´ Alergias\n"
                "‚Ä¢ üå± Vegano\n"
                "‚Ä¢ ü•õ Sin lactosa\n"
                "‚Ä¢ üåæ Sin gluten\n"
                "‚Ä¢ üïå Halal\n"
                "‚Ä¢ ‚ú°Ô∏è Kosher\n"
                "‚Ä¢ ‚è≠Ô∏è Sin restricciones especiales\n\n"
                "Puedes usar los botones o escribir el nombre:",
                reply_markup=keyboard
            )
            
        elif step == "disgustos_texto":
            # Procesar disgustos por texto libre
            if message.text.lower() in ["ninguno", "sin restricciones", "no"]:
                additional_dislikes = []
            else:
                additional_dislikes = [food.strip() for food in message.text.split(',')]
            
            # Combinar con restricciones anteriores
            current_dislikes = data.get("disliked_foods", [])
            data["disliked_foods"] = current_dislikes + additional_dislikes
            
            meal_bot.user_states[telegram_id]["step"] = "restricciones"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("üö´ Alergias", "üå± Vegano")
            keyboard.add("ü•õ Sin lactosa", "üåæ Sin gluten")
            keyboard.add("üïå Halal", "‚ú°Ô∏è Kosher")
            keyboard.add("‚è≠Ô∏è Sin restricciones especiales")
            
            bot.send_message(
                message.chat.id,
                "‚úÖ Alimentos adicionales registrados\n\n"
                "‚ö†Ô∏è **Paso 9E/10:** ¬øTienes alguna RESTRICCI√ìN ESPECIAL?\n\n"
                "**Opciones disponibles:**\n"
                "‚Ä¢ üö´ Alergias\n"
                "‚Ä¢ üå± Vegano\n"
                "‚Ä¢ ü•õ Sin lactosa\n"
                "‚Ä¢ üåæ Sin gluten\n"
                "‚Ä¢ üïå Halal\n"
                "‚Ä¢ ‚ú°Ô∏è Kosher\n"
                "‚Ä¢ ‚è≠Ô∏è Sin restricciones especiales\n\n"
                "Puedes usar los botones o escribir el nombre:",
                reply_markup=keyboard
            )
            
        elif step == "restricciones":
            # Procesar restricciones especiales con manejo flexible
            text = message.text.lower().strip()
            
            if "sin restricciones" in text or "ninguna" in text:
                data["special_restrictions"] = []
            else:
                restriction_map = {
                    "üö´ alergias": "alergias", "alergias": "alergias", "alergia": "alergias",
                    "üå± vegano": "vegano", "vegano": "vegano", "vegetariano": "vegano",
                    "ü•õ sin lactosa": "sin_lactosa", "sin lactosa": "sin_lactosa", "lactosa": "sin_lactosa",
                    "üåæ sin gluten": "sin_gluten", "sin gluten": "sin_gluten", "gluten": "sin_gluten", "celiaco": "sin_gluten",
                    "üïå halal": "halal", "halal": "halal",
                    "‚ú°Ô∏è kosher": "kosher", "kosher": "kosher"
                }
                
                selected = None
                for key, value in restriction_map.items():
                    if key in text or text in key:
                        selected = value
                        break
                
                if selected:
                    data["special_restrictions"] = [selected]
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå No reconoc√≠ esa opci√≥n. Por favor usa los botones o escribe: alergias, vegano, sin lactosa, sin gluten, halal, kosher, o sin restricciones."
                    )
                    return
            
            meal_bot.user_states[telegram_id]["step"] = "metodos_coccion"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            keyboard.add("üî• Horno", "üç≥ Sart√©n", "üç≤ Plancha")
            keyboard.add("ü•ò Guisos", "üçú Vapor", "ü•ó Crudo")
            keyboard.add("‚úÖ Todos", "‚è≠Ô∏è Sin preferencias")
            
            bot.send_message(
                message.chat.id,
                "‚úÖ Restricciones registradas\n\n"
                "üë®‚Äçüç≥ **Paso 9F/10:** ¬øQu√© M√âTODOS DE COCCI√ìN prefieres?\n\n"
                "**Opciones disponibles:**\n"
                "‚Ä¢ üî• Horno\n"
                "‚Ä¢ üç≥ Sart√©n\n"
                "‚Ä¢ üç≤ Plancha\n"
                "‚Ä¢ ü•ò Guisos\n"
                "‚Ä¢ üçú Vapor\n"
                "‚Ä¢ ü•ó Crudo\n"
                "‚Ä¢ ‚úÖ Todos\n"
                "‚Ä¢ ‚è≠Ô∏è Sin preferencias\n\n"
                "Puedes usar los botones o escribir el nombre:",
                reply_markup=keyboard
            )
            
        elif step == "metodos_coccion":
            # Procesar m√©todos de cocci√≥n con manejo flexible
            text = message.text.lower().strip()
            
            if "sin preferencias" in text or "ninguna" in text:
                data["cooking_methods"] = ["horno", "sarten", "plancha"]  # Default
            elif "todos" in text or text == "‚úÖ todos":
                data["cooking_methods"] = ["horno", "sarten", "plancha", "guisos", "vapor", "crudo"]
            else:
                method_map = {
                    "üî• horno": "horno", "horno": "horno",
                    "üç≥ sart√©n": "sarten", "sarten": "sarten", "sart√©n": "sarten", "freir": "sarten",
                    "üç≤ plancha": "plancha", "plancha": "plancha", "grill": "plancha",
                    "ü•ò guisos": "guisos", "guisos": "guisos", "hervir": "guisos", "cocido": "guisos",
                    "üçú vapor": "vapor", "vapor": "vapor", "vaporera": "vapor",
                    "ü•ó crudo": "crudo", "crudo": "crudo", "ensalada": "crudo"
                }
                
                selected = None
                for key, value in method_map.items():
                    if key in text or text in key:
                        selected = value
                        break
                
                if selected:
                    data["cooking_methods"] = [selected]
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå No reconoc√≠ esa opci√≥n. Por favor usa los botones o escribe: horno, sarten, plancha, guisos, vapor, crudo, todos, o sin preferencias."
                    )
                    return
            
            meal_bot.user_states[telegram_id]["step"] = "finalizar"
            meal_bot.user_states[telegram_id]["data"] = data
            
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            keyboard.add("‚úÖ Crear mi perfil nutricional")
            
            bot.send_message(
                message.chat.id,
                "‚úÖ M√©todos de cocci√≥n registrados\n\n"
                "üéØ **Paso 10/10:** ¬°Todo listo para crear tu perfil cient√≠fico!\n\n"
                "üìä **Tu configuraci√≥n incluye:**\n"
                "‚Ä¢ Datos biom√©tricos y objetivo\n"
                "‚Ä¢ Available Energy cient√≠fico\n"
                "‚Ä¢ Distribuci√≥n de ejercicio detallada\n"
                "‚Ä¢ Preferencias alimentarias completas\n"
                "‚Ä¢ Restricciones y m√©todos de cocci√≥n\n\n"
                "ü§ñ **El sistema generar√° recetas personalizadas con IA**\n\n"
                "**Para finalizar:**\n"
                "‚Ä¢ Usa el bot√≥n: ‚úÖ Crear mi perfil nutricional\n"
                "‚Ä¢ O escribe: 'crear perfil' o 'finalizar'\n\n"
                "¬°Tu perfil cient√≠fico estar√° listo en segundos!",
                reply_markup=keyboard
            )
            
        elif step == "finalizar":
            # Validar entrada flexible para crear perfil
            text = message.text.lower().strip()
            
            # Aceptar m√∫ltiples variaciones
            valid_inputs = [
                "‚úÖ crear mi perfil nutricional",
                "crear mi perfil nutricional", 
                "crear perfil",
                "crear",
                "finalizar",
                "terminar",
                "continuar",
                "listo",
                "si"
            ]
            
            # Verificar si la entrada es v√°lida
            is_valid = False
            for valid_input in valid_inputs:
                if valid_input in text or text in valid_input:
                    is_valid = True
                    break
            
            if not is_valid:
                bot.send_message(
                    message.chat.id,
                    "‚ùå Para crear tu perfil, por favor:\n\n"
                    "‚Ä¢ Usa el bot√≥n: ‚úÖ Crear mi perfil nutricional\n"
                    "‚Ä¢ O escribe: 'crear perfil', 'finalizar', 'listo'\n\n"
                    "¬°Est√°s a un paso de tener tu perfil cient√≠fico!"
                )
                return
            
            # Crear perfil completo usando UserProfileSystem
            try:
                # Preparar datos para el sistema de perfiles
                exercise_data = []
                if data.get("ejercicio_tipo", "ninguno") != "ninguno":
                    exercise_data = [{
                        "tipo": data["ejercicio_tipo"],
                        "subtipo": "intensidad_media",  # Default
                        "duracion": data["duracion_promedio"],
                        "peso": data["peso"],
                        "frecuencia_semanal": data["frecuencia_semanal"]
                    }]
                
                # Combinar todas las preferencias alimentarias
                all_liked_foods = (
                    data.get("liked_proteins", []) + 
                    data.get("liked_carbs", []) + 
                    data.get("liked_vegetables", []) +
                    data.get("liked_foods", [])  # Fallback para compatibilidad
                )
                
                profile_data = {
                    "peso": data["peso"],
                    "altura": data["altura"],
                    "edad": data["edad"],
                    "sexo": data["sexo"],
                    "objetivo": data["objetivo"],
                    "activity_factor": data["activity_factor"],
                    "exercise_data": exercise_data,
                    "preferences": {
                        "liked_foods": all_liked_foods,
                        "liked_proteins": data.get("liked_proteins", []),
                        "liked_carbs": data.get("liked_carbs", []),
                        "liked_vegetables": data.get("liked_vegetables", []),
                        "disliked_foods": data.get("disliked_foods", []),
                        "special_restrictions": data.get("special_restrictions", []),
                        "cooking_methods": data.get("cooking_methods", ["horno", "sarten", "plancha"])
                    },
                    "variety_level": 3,  # Default
                    "cooking_schedule": "dos_sesiones",  # Default
                    "max_prep_time": 60  # Default
                }
                
                # Crear perfil usando el sistema cient√≠fico
                user_profile = meal_bot.profile_system.create_user_profile(telegram_id, profile_data)
                
                # Guardar en la base de datos
                meal_bot.data["users"][telegram_id] = user_profile
                meal_bot.save_data()
                
                # Limpiar estado de configuraci√≥n
                meal_bot.user_states[telegram_id] = {}
                
                # Mostrar resumen del perfil creado
                success_message = f"""
üéâ **¬°PERFIL NUTRICIONAL CREADO EXITOSAMENTE!**

üë§ **TU PERFIL CIENT√çFICO:**
‚Ä¢ Objetivo: {user_profile['basic_data']['objetivo_descripcion']}
‚Ä¢ BMR: {user_profile['body_composition']['bmr']} kcal/d√≠a
‚Ä¢ Available Energy: {user_profile['energy_data']['available_energy']} kcal/kg FFM/d√≠a
‚Ä¢ Estado: {user_profile['energy_data']['ea_status']['color']} {user_profile['energy_data']['ea_status']['description']}

üéØ **MACROS DIARIOS PERSONALIZADOS:**
üî• {user_profile['macros']['calories']} kcal totales
ü•© {user_profile['macros']['protein_g']}g prote√≠na
üçû {user_profile['macros']['carbs_g']}g carbohidratos  
ü•ë {user_profile['macros']['fat_g']}g grasas

üí° **RECOMENDACI√ìN CIENT√çFICA:**
{user_profile['energy_data']['ea_status']['recommendation']}

üöÄ **¬°YA PUEDES USAR EL SISTEMA V2.0!**

**Comandos disponibles:**
‚Ä¢ `/mis_macros` - Ver tu perfil completo
‚Ä¢ `/menu` - Men√∫ semanal con timing nutricional
‚Ä¢ `/buscar [consulta]` - Generar recetas con IA
‚Ä¢ `/generar` - Recetas espec√≠ficas por timing
‚Ä¢ `/complementos` - Ver complementos mediterr√°neos

¬°Tu alimentaci√≥n ahora est√° optimizada cient√≠ficamente! üß¨
"""
                
                meal_bot.send_long_message(
                    message.chat.id,
                    success_message,
                    parse_mode='Markdown',
                    reply_markup=meal_bot.create_main_menu_keyboard()
                )
                
            except Exception as e:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå Error creando el perfil: {str(e)}\n\n"
                    "Por favor, intenta de nuevo con /perfil"
                )
        
    except ValueError as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå Error: {str(e)}\n\n"
            "Por favor, introduce un valor v√°lido."
        )

def process_ai_search(telegram_id: str, query: str, message):
    """Procesar b√∫squeda con IA completamente funcional"""
    
    user_profile = meal_bot.get_user_profile(telegram_id)
    if not user_profile:
        bot.send_message(
            message.chat.id,
            "‚ùå **Error:** Necesitas configurar tu perfil primero.\n"
            "Usa /perfil para comenzar.",
            parse_mode='Markdown'
        )
        return
    
    try:
        # Generar recetas con IA
        result = meal_bot.ai_generator.search_and_adapt_recipes(user_profile, query)
        
        if result["success"]:
            results = result["results"]
            total_found = result["total_found"]
            
            if total_found == 0:
                bot.send_message(
                    message.chat.id,
                    f"üîç **B√∫squeda: '{query}'**\n\n"
                    "‚ùå No se encontraron recetas que cumplan tus criterios.\n\n"
                    "üí° **Sugerencias:**\n"
                    "‚Ä¢ Intenta t√©rminos m√°s generales (ej: 'pollo' en lugar de 'pollo al curry')\n"
                    "‚Ä¢ Especifica el timing (ej: 'post entreno')\n"
                    "‚Ä¢ Menciona ingredientes principales\n\n"
                    "**Ejemplos exitosos:**\n"
                    "‚Ä¢ `/buscar proteina post entreno`\n"
                    "‚Ä¢ `/buscar legumbres mediterraneas`\n"
                    "‚Ä¢ `/buscar desayuno alto carbohidratos`",
                    parse_mode='Markdown'
                )
                return
            
            # Mostrar resultados encontrados
            intro_text = f"""
ü§ñ **B√öSQUEDA COMPLETADA CON IA**

**Tu consulta:** '{query}'
‚úÖ **Encontradas:** {total_found} recetas v√°lidas
üìä **Adaptadas** a tu perfil nutricional

üéØ **Tu objetivo:** {user_profile['basic_data']['objetivo_descripcion']}
üî• **Tus macros:** {user_profile['macros']['calories']} kcal diarias

**RECETAS GENERADAS:**
"""
            
            meal_bot.send_long_message(message.chat.id, intro_text, parse_mode='Markdown')
            
            # Mostrar cada receta encontrada
            for i, recipe_result in enumerate(results[:3], 1):  # M√°ximo 3 recetas
                recipe = recipe_result.get("adaptacion_propuesta")
                validation = recipe_result.get("validation", {})
                changes = recipe_result.get("cambios_realizados", [])
                
                if recipe:
                    # Formatear receta para display
                    recipe_text = format_recipe_for_display(recipe, validation)
                    
                    # Agregar informaci√≥n de cambios
                    if changes:
                        recipe_text += f"\n\nüîß **Adaptaciones realizadas:**\n"
                        for change in changes:
                            recipe_text += f"‚Ä¢ {change}\n"
                    
                    # Enviar receta
                    meal_bot.send_long_message(
                        message.chat.id, 
                        f"**OPCI√ìN {i}:**\n{recipe_text}",
                        parse_mode='Markdown'
                    )
            
            # Opciones de seguimiento
            followup_text = f"""
üéØ **PR√ìXIMOS PASOS:**

‚Ä¢ **¬øTe gusta alguna receta?** Responde con el n√∫mero (1, 2, 3)
‚Ä¢ **¬øQuieres m√°s opciones?** Env√≠a `/buscar {query} m√°s opciones`
‚Ä¢ **¬øModificar algo?** Escribe qu√© cambiar
‚Ä¢ **¬øGenerar men√∫ completo?** Usa `/nueva_semana`

üí° **Tip:** Todas las recetas est√°n validadas con ingredientes naturales y ajustadas a tus macros.
"""
            
            meal_bot.send_long_message(message.chat.id, followup_text, parse_mode='Markdown')
            
        else:
            # Error en la generaci√≥n
            error_msg = result.get("error", "Error desconocido")
            bot.send_message(
                message.chat.id,
                f"‚ùå **Error en la b√∫squeda:**\n{error_msg}\n\n"
                "üí° **Intenta:**\n"
                "‚Ä¢ Reformular tu consulta\n"
                "‚Ä¢ Usar t√©rminos m√°s espec√≠ficos\n"
                "‚Ä¢ Verificar tu conexi√≥n a internet\n\n"
                "Si el problema persiste, contacta al administrador.",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in AI search: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå **Error t√©cnico** procesando tu b√∫squeda.\n"
            "Int√©ntalo de nuevo en unos momentos.",
            parse_mode='Markdown'
        )
    
    # Limpiar estado
    meal_bot.user_states[telegram_id] = {}

# ========================================
# MANEJADOR DE MENSAJES DE TEXTO
# ========================================

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """Manejar todos los mensajes de texto seg√∫n el estado del usuario"""
    telegram_id = str(message.from_user.id)
    user_state = meal_bot.user_states.get(telegram_id, {})
    
    if user_state.get("state") == "profile_setup":
        process_profile_setup(telegram_id, message)
    elif user_state.get("state") == "schedule_setup":
        process_schedule_setup(telegram_id, message)
    elif user_state.get("state") == "ai_search":
        # B√∫squeda ya procesada
        pass
    else:
        # Mensaje libre - responder con ayuda
        bot.send_message(
            message.chat.id,
            "‚ùì **COMANDOS DISPONIBLES:**\n\n"
            "/perfil - Configurar perfil nutricional\n"
            "/mis_macros - Ver tus macros\n"
            "/menu - Men√∫ semanal\n"
            "/recetas - Explorar recetas\n"
            "/complementos - Ver complementos\n"
            "/buscar [consulta] - Buscar recetas con IA\n"
            "/generar - Generar receta espec√≠fica\n"
            "/nueva_semana - Configurar cronograma\n\n"
            "üí° **Tip:** Empieza configurando tu perfil con /perfil"
        )

def process_schedule_setup(telegram_id: str, message):
    """Procesar configuraci√≥n de cronograma"""
    user_state = meal_bot.user_states.get(telegram_id, {})
    choice = message.text.upper().strip()
    
    schedules = {
        "A": "sesion_unica_domingo",
        "B": "dos_sesiones", 
        "C": "tres_sesiones",
        "D": "preparacion_diaria"
    }
    
    if choice in schedules:
        schedule_id = schedules[choice]
        schedule_data = meal_bot.data["cooking_schedules"][schedule_id]
        
        # Guardar en perfil de usuario (cuando est√© implementado)
        # user_profile["settings"]["cooking_schedule"] = schedule_id
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ **Cronograma seleccionado:** {schedule_data['name']}\n\n"
            f"üìù **Descripci√≥n:** {schedule_data['description']}\n"
            f"‚è±Ô∏è **Tiempo estimado:** {schedule_data['estimated_time']}\n\n"
            "üéØ **Pr√≥ximos pasos:**\n"
            "‚Ä¢ Usa /buscar para generar recetas espec√≠ficas\n"
            "‚Ä¢ Configura tu nivel de variedad semanal\n"
            "‚Ä¢ El sistema optimizar√° tu lista de compras\n\n"
            "**Tu cronograma se aplicar√° autom√°ticamente al generar men√∫s.**",
            parse_mode='Markdown',
            reply_markup=meal_bot.create_main_menu_keyboard()
        )
        
        # Limpiar estado
        meal_bot.user_states[telegram_id] = {}
        
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå **Opci√≥n no v√°lida**\n\n"
            "Por favor responde con A, B, C o D seg√∫n tu preferencia."
        )

# ========================================
# CONFIGURACI√ìN WEBHOOK/POLLING
# ========================================

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """Webhook endpoint para Railway"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 400

def setup_webhook():
    """Configurar webhook si est√° habilitado"""
    if USE_WEBHOOK and WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook configurado: {webhook_url}")
        return True
    return False

def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Iniciando Meal Prep Bot V2.0...")
    
    try:
        # Intentar configurar webhook
        if not setup_webhook():
            logger.info("üì± Iniciando en modo polling...")
            bot.remove_webhook()
            bot.polling(none_stop=True, interval=1, timeout=60)
        else:
            logger.info("üåê Iniciando servidor webhook...")
            # En Railway, el puerto se obtiene de la variable de entorno
            port = int(os.environ.get('PORT', 5000))
            app.run(host='0.0.0.0', port=port, debug=False)
            
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar el bot: {e}")
        raise

if __name__ == "__main__":
    main()